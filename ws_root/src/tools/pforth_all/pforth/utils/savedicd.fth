\ @(#) savedicd.fth 96/03/21 1.4
\ Save dictionary as data table.
\
\ Author: Phil Burk
\ Copyright 1987 Phil Burk
\ All Rights Reserved.

ANEW TASK-SAVE_DIC_AS_DATA

\ !!! set to 4 for minimally sized dictionary to prevent DIAB
\ compiler from crashing!  Allocate more space in pForth.
4 constant SDAD_NAMES_EXTRA   \ space for additional names
4 constant SDAD_CODE_EXTRA    \ space for additional names

\ buffer the file I/O for better performance
256 constant SDAD_BUFFER_SIZE
create SDAD-BUFFER SDAD_BUFFER_SIZE allot
variable SDAD-BUFFER-INDEX
variable SDAD-BUFFER-FID
		0 SDAD-BUFFER-FID !

: SDAD.FLUSH  ( -- ior )
	sdad-buffer sdad-buffer-index @  \ data
\ 2dup type
	sdad-buffer-fid @  write-file
	0 sdad-buffer-index !
;

: SDAD.EMIT  ( char -- )
    sdad-buffer-index @  sdad_buffer_size >=
    IF
    	sdad.flush abort" SDAD.FLUSH failed!"
    THEN
\
    sdad-buffer sdad-buffer-index @ + c!
    1 sdad-buffer-index +!
;

: SDAD.TYPE  ( c-addr cnt -- )
	0 DO
		dup c@ sdad.emit    \ char to buffer
		1+   \ advance char pointer
	LOOP
	drop
;

: $SDAD.LINE  ( $addr -- )
	count sdad.type
	EOL sdad.emit
;

: (U8.)  ( u -- a l , unsigned conversion, at least 8 digits )
	0 <#  # # # #  # # # #S #>
;

: SDAD.CLOSE ( -- )
	SDAD-BUFFER-FID @ ?dup
	IF
		sdad.flush abort" SDAD.FLUSH failed!"
		close-file drop
		0 SDAD-BUFFER-FID !
	THEN
;

: SDAD.OPEN  ( -- ior, open file )
	sdad.close
	c" pfdicdat.h" count r/w create-file dup >r
	IF
		drop ." Could not create file pfdicdat.h" cr
	ELSE
		SDAD-BUFFER-FID !
	THEN
	r>
;

: SDAD.DUMP.HEX  { val -- }
	base @ >r hex
	p"    0x" count sdad.type
	val (u8.) sdad.type
	r> base !
;
: SDAD.DUMP.HEX, 
	sdad.dump.hex
	ascii , sdad.emit
;

: SDAD.DUMP.DATA { start-address end-address num-zeros | num-words -- }
	end-address start-address - cell / -> num-words
	num-words 0
	DO
		i 511 and 0= IF i . cr THEN   \ progress report
		i 3 and 0=
		IF
			 
			 EOL sdad.emit
			 p" /*" count sdad.type
			 i cell* sdad.dump.hex
			 p" : */" count sdad.type
		THEN   \ 4 numbers per line, print offset
		start-address   i cell* +   @
		sdad.dump.hex,
	LOOP
\
	num-zeros cell / -> num-words
	num-words 0
	DO
		i 511 and 0= IF i . cr THEN   \ progress report
		i 3 and 0= IF EOL sdad.emit THEN   \ 4 numbers per line
		0 sdad.dump.hex,
	LOOP
;

: SDAD.DEFINE  { $name val -- }
	p" #define " count sdad.type
	$name  count sdad.type
	p"   (" count sdad.type
	val (u.) sdad.type
	p" )" $sdad.line
;

: SDAD   { | fid -- }
	sdad.open abort" sdad.open failed!"
\ Write headers.
	p" /* This file generated by the Forth command SAVE-DIC-AS-DATA */" $sdad.line

	p" HEADERPTR" headers-ptr @ namebase - sdad.define
	p" RELCONTEXT" context @ namebase - sdad.define
	p" CODEPTR" here codebase - sdad.define
	
." Saving Names" cr
	p" static uint32 MinDicNames[] = {" count sdad.type
	namebase headers-ptr @ SDAD_NAMES_EXTRA sdad.dump.data
	EOL sdad.emit
	p" };" $sdad.line
	
." Saving Code" cr
	p" static uint32 MinDicCode[] = {" count sdad.type
	codebase here SDAD_CODE_EXTRA sdad.dump.data
	EOL sdad.emit
	p" };" $sdad.line

	sdad.close
;

if.forgotten sdad.close
