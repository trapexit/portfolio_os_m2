/*
 * @(#) cltmacros.h 96/01/16 1.8
 * Copyright (c) 1995, The 3DO Company
 *
 * Definitions of the M2 Triangle Engine registers, fields, and constants.
 * Shortcuts are also provided at the bottom of this file.
 *
 * This file is usable by C programs, and assembly language programs which
 * run through a C preprocessor before assembling.
 */

#ifndef CLTMACROS_H
#define CLTMACROS_H


/* Bit definitions for big endian with PPC convention */

#define PPCSHIFT(n)				(31-n)
#define PPCBIT(n)				((uint32)(1<<PPCSHIFT(n)))
#define PPCMASK(d, n)			((uint32)(d<<PPCSHIFT(n)))
#define CLT_Bits(r, f, d)		(((d)<<CLT_Shift(r,f))&(CLT_Mask(r,f)))
#define CLT_Mask(r, f)			(FV_##r##_##f##_MASK)
#define CLT_Shift(r, f)			(FV_##r##_##f##_SHIFT)
#define CLT_Const(r,f,v)		(RC_##r##_##f##_##v)
#define CLT_GetBits(r, f, d)	(((d)&CLT_Mask(r,f))>>CLT_Shift(r,f))
#define CLT_SetConst(r,f,v)		(CLT_Bits(r, f, CLT_Const(r,f,v)))

/* Start of register names */


#define RA_DCNTLDATA			0x0010
#define RA_DCNTL				0x0014
#	define	FV_DCNTL_SYNC_MASK	PPCBIT(26)		/* Pause instruction execution until the */
#	define	FV_DCNTL_SYNC_SHIFT	PPCSHIFT(26)	/* TE pipe has been flushed. */
#	define	FV_DCNTL_PSE_MASK	PPCBIT(27)		/* Pause execution. */
#	define	FV_DCNTL_PSE_SHIFT	PPCSHIFT(27)
#	define	FV_DCNTL_DINT_MASK	PPCBIT(28)		/* Interrupt CPU with vector.  TEDCntlData is used  */
#	define	FV_DCNTL_DINT_SHIFT	PPCSHIFT(28)	/* as vector data. */
#	define	FV_DCNTL_JR_MASK	PPCBIT(29)		/* Jump relative - use TEDCntlData as (2's complement) */
#	define	FV_DCNTL_JR_SHIFT	PPCSHIFT(29)	/* offset. */
#	define	FV_DCNTL_JA_MASK	PPCBIT(30)		/* Jump absolute - use TEDCntlData */
#	define	FV_DCNTL_JA_SHIFT	PPCSHIFT(30)	/* as destination address. */
#	define	FV_DCNTL_TLD_MASK	PPCBIT(31)		/* Texture Load */
#	define	FV_DCNTL_TLD_SHIFT	PPCSHIFT(31)

#define RA_ESCNTL				0x4000
#	define	FV_ESCNTL_PERSPECTIVEOFF_MASK	PPCBIT(29)		/* RWSC	texture perspective disable  */
#	define	FV_ESCNTL_PERSPECTIVEOFF_SHIFT	PPCSHIFT(29)
#	define	FV_ESCNTL_DUSCAN_MASK			PPCBIT(30)		/*	RWSC Down -> Up Scan direction flag */
#	define	FV_ESCNTL_DUSCAN_SHIFT			PPCSHIFT(30)
#	define	FV_ESCNTL_DSPOFF_MASK			PPCBIT(31)		/*	RWSC Disables double strike prevention  */
#	define	FV_ESCNTL_DSPOFF_SHIFT			PPCSHIFT(31)	

#define	RA_TXTLDCNTL			0x6404
#	define FV_TXTLDCNTL_COMPRESSED_MASK		PPCBIT(21)		/* 0 => uncompressed; 1 => Compressed */
#	define FV_TXTLDCNTL_COMPRESSED_SHIFT	PPCSHIFT(21)
#	define FV_TXTLDCNTL_LOADMODE_MASK		PPCMASK(3, 23)	/* 0 => Load texture; 1 => MMDMA; */
#	define FV_TXTLDCNTL_LOADMODE_SHIFT		PPCSHIFT(23)	/*    2 => PIP Load */
#		define RC_TXTLDCNTL_LOADMODE_TEXTURE		0
#		define RC_TXTLDCNTL_LOADMODE_MMDMA			1
#		define RC_TXTLDCNTL_LOADMODE_PIP			2
#	define FV_TXTLDCNTL_SRCBITOFF_MASK		PPCMASK(7,31)	/* src bit offset used for */
#	define FV_TXTLDCNTL_SRCBITOFF_SHIFT		PPCSHIFT(31)	/* uncmprsd txtr load */


#define RA_TXTADDRCNTL			0x6408
#	define FV_TXTADDRCNTL_TEXTUREENABLE_MASK	PPCBIT(18)		
#	define FV_TXTADDRCNTL_TEXTUREENABLE_SHIFT	PPCSHIFT(18)
#	define FV_TXTADDRCNTL_MINFILTER_MASK		PPCMASK(7, 21)	/* minification filter */
#	define FV_TXTADDRCNTL_MINFILTER_SHIFT		PPCSHIFT( 21)
#		define RC_TXTADDRCNTL_MINFILTER_POINT		0
#		define RC_TXTADDRCNTL_MINFILTER_BILINEAR	2
#	define FV_TXTADDRCNTL_INTERFILTER_MASK		PPCMASK(7, 24)	/* inter filter */
#	define FV_TXTADDRCNTL_INTERFILTER_SHIFT		PPCSHIFT( 24)	
#		define RC_TXTADDRCNTL_INTERFILTER_POINT		0
#		define RC_TXTADDRCNTL_INTERFILTER_LINEAR	1
#		define RC_TXTADDRCNTL_INTERFILTER_BILINEAR	2
#		define RC_TXTADDRCNTL_INTERFILTER_TRILINEAR	3
#	define FV_TXTADDRCNTL_MAGFILTER_MASK		PPCMASK(7, 27)	/* magnification filter */
#	define FV_TXTADDRCNTL_MAGFILTER_SHIFT		PPCSHIFT( 27)	
#		define RC_TXTADDRCNTL_MAGFILTER_POINT		0
#		define RC_TXTADDRCNTL_MAGFILTER_BILINEAR	2
#	define FV_TXTADDRCNTL_LODMAX_MASK			PPCMASK(0xF, 31)	/* max LOD */
#	define FV_TXTADDRCNTL_LODMAX_SHIFT			PPCSHIFT(31)	

#define RA_TXTPIPCNTL			0x640c
#	define FV_TXTPIPCNTL_PIPSSBSELECT_MASK		PPCMASK(7, 17)		/* 0 => constant, 1=> texture */
#	define FV_TXTPIPCNTL_PIPSSBSELECT_SHIFT		PPCSHIFT(17)		/* 1 => PIP */
#		define RC_TXTPIPCNTL_PIPSSBSELECT_CONSTANT		0
#		define RC_TXTPIPCNTL_PIPSSBSELECT_TEXTURE		1
#		define RC_TXTPIPCNTL_PIPSSBSELECT_PIP			2
#	define FV_TXTPIPCNTL_PIPALPHASELECT_MASK	PPCMASK(7, 20)	
#	define FV_TXTPIPCNTL_PIPALPHASELECT_SHIFT	PPCSHIFT(20)	
#		define RC_TXTPIPCNTL_PIPALPHASELECT_CONSTANT	0
#		define RC_TXTPIPCNTL_PIPALPHASELECT_TEXTURE		1
#		define RC_TXTPIPCNTL_PIPALPHASELECT_PIP			2
#	define FV_TXTPIPCNTL_PIPCOLORSELECT_MASK	PPCMASK(7, 23)	
#	define FV_TXTPIPCNTL_PIPCOLORSELECT_SHIFT	PPCSHIFT(23)	
#		define RC_TXTPIPCNTL_PIPCOLORSELECT_CONSTANT	0
#		define RC_TXTPIPCNTL_PIPCOLORSELECT_TEXTURE		1
#		define RC_TXTPIPCNTL_PIPCOLORSELECT_PIP			2
#	define FV_TXTPIPCNTL_PIPINDEXOFFSET_MASK	PPCMASK(0xFF, 31)	/* index offset */
#	define FV_TXTPIPCNTL_PIPINDEXOFFSET_SHIFT	PPCSHIFT(31)		

#define RA_TXTTABCNTL			0x6410
#	define FV_TXTTABCNTL_FIRSTCOLOR_MASK	PPCMASK(7, 31)		/* first color select */
#	define FV_TXTTABCNTL_FIRSTCOLOR_SHIFT	PPCSHIFT(31)
#		define RC_TXTTABCNTL_FIRSTCOLOR_PRIMALPHA	0
#		define RC_TXTTABCNTL_FIRSTCOLOR_PRIMCOLOR	1
#		define RC_TXTTABCNTL_FIRSTCOLOR_TEXALPHA   	2
#		define RC_TXTTABCNTL_FIRSTCOLOR_TEXCOLOR   	3
#		define RC_TXTTABCNTL_FIRSTCOLOR_CONSTALPHA 	4
#		define RC_TXTTABCNTL_FIRSTCOLOR_CONSTCOLOR 	5
#	define FV_TXTTABCNTL_SECONDCOLOR_MASK	PPCMASK(7, 28)		/* second color select */
#	define FV_TXTTABCNTL_SECONDCOLOR_SHIFT	PPCSHIFT(28)
#		define RC_TXTTABCNTL_SECONDCOLOR_PRIMALPHA	0
#		define RC_TXTTABCNTL_SECONDCOLOR_PRIMCOLOR	1
#		define RC_TXTTABCNTL_SECONDCOLOR_TEXALPHA   2
#		define RC_TXTTABCNTL_SECONDCOLOR_TEXCOLOR   3
#		define RC_TXTTABCNTL_SECONDCOLOR_CONSTALPHA 4
#		define RC_TXTTABCNTL_SECONDCOLOR_CONSTCOLOR 5
#	define FV_TXTTABCNTL_THIRDCOLOR_MASK	PPCMASK(7, 25)		/* 3rd color select */
#	define FV_TXTTABCNTL_THIRDCOLOR_SHIFT	PPCSHIFT(25)
#		define RC_TXTTABCNTL_THIRDCOLOR_PRIMALPHA	0
#		define RC_TXTTABCNTL_THIRDCOLOR_PRIMCOLOR	1
#		define RC_TXTTABCNTL_THIRDCOLOR_TEXALPHA   	2
#		define RC_TXTTABCNTL_THIRDCOLOR_TEXCOLOR   	3
#		define RC_TXTTABCNTL_THIRDCOLOR_CONSTALPHA 	4
#		define RC_TXTTABCNTL_THIRDCOLOR_CONSTCOLOR 	5
#	define FV_TXTTABCNTL_FIRSTALPHA_MASK	PPCMASK(3, 20)		/* first alpha select */
#	define FV_TXTTABCNTL_FIRSTALPHA_SHIFT	PPCSHIFT(20)
#		define RC_TXTTABCNTL_FIRSTALPHA_PRIMALPHA	0
#		define RC_TXTTABCNTL_FIRSTALPHA_TEXALPHA	1
#		define RC_TXTTABCNTL_FIRSTALPHA_CONSTALPHA	2
#	define FV_TXTTABCNTL_SECONDALPHA_MASK	PPCMASK(3, 18)		/* second alpha select */
#	define FV_TXTTABCNTL_SECONDALPHA_SHIFT	PPCSHIFT(18)	
#		define RC_TXTTABCNTL_SECONDALPHA_PRIMALPHA	0
#		define RC_TXTTABCNTL_SECONDALPHA_TEXALPHA	1
#		define RC_TXTTABCNTL_SECONDALPHA_CONSTALPHA	2
#	define FV_TXTTABCNTL_COLOROUT_MASK		PPCMASK(3, 22)		/* Color out select */
#	define FV_TXTTABCNTL_COLOROUT_SHIFT		PPCSHIFT(22)	
#		define RC_TXTTABCNTL_COLOROUT_PRIMCOLOR		0
#		define RC_TXTTABCNTL_COLOROUT_TEXCOLOR		1
#		define RC_TXTTABCNTL_COLOROUT_BLEND			2
#	define FV_TXTTABCNTL_ALPHAOUT_MASK		PPCMASK(3, 16)		/* Alpha out select */
#	define FV_TXTTABCNTL_ALPHAOUT_SHIFT		PPCSHIFT(16)	
#		define RC_TXTTABCNTL_ALPHAOUT_PRIMALPHA		0
#		define RC_TXTTABCNTL_ALPHAOUT_TEXALPHA		1
#		define RC_TXTTABCNTL_ALPHAOUT_BLEND			2
#	define FV_TXTTABCNTL_BLENDOP_MASK		PPCBIT(14)			/* Blend Operation */
#	define FV_TXTTABCNTL_BLENDOP_SHIFT		PPCSHIFT(14)	
#		define RC_TXTTABCNTL_BLENDOP_LERP			0
#		define RC_TXTTABCNTL_BLENDOP_MULT			1

#define RA_TXTLODBASE0			0x6414
#define RA_TXTLDDSTBASE			0x6414
#define RA_TXTLODBASE1			0x6418
#define RA_TXTLODBASE2			0x641c
#define RA_TXTLODBASE3			0x6420
#define RA_TXTLDSRCADDR			0x6424
#define RA_TXTCOUNT				0x6428
#	define FV_TXTCOUNT_VALUE_MASK		PPCMASK(0xffffff, 31)
#	define FV_TXTCOUNT_VALUE_SHIFT		PPCSHIFT(31)

#define RA_TXTUVMAX				0x642c
#	define FV_TXTUVMAX_UMAX_MASK		PPCMASK(0x3FF, 15)
#	define FV_TXTUVMAX_UMAX_SHIFT		PPCSHIFT( 15)
#	define FV_TXTUVMAX_VMAX_MASK		PPCMASK(0x3FF, 31)
#	define FV_TXTUVMAX_VMAX_SHIFT		PPCSHIFT( 31)

#define RA_TXTUVMASK			0x6430
#	define FV_TXTUVMASK_UMASK_MASK		PPCMASK(0x3FF, 15)
#	define FV_TXTUVMASK_UMASK_SHIFT		PPCSHIFT( 15)
#	define FV_TXTUVMASK_VMASK_MASK		PPCMASK(0x3FF, 31)
#	define FV_TXTUVMASK_VMASK_SHIFT		PPCSHIFT( 31)

#define RA_TXTSRCTYPE01			0x6434
#	define FV_TXTSRCTYPE01_CDEPTH0_MASK			PPCMASK(0xF, 31)
#	define FV_TXTSRCTYPE01_CDEPTH0_SHIFT		PPCSHIFT( 31)
#	define FV_TXTSRCTYPE01_ADEPTH0_MASK			PPCMASK(0xF, 27)
#	define FV_TXTSRCTYPE01_ADEPTH0_SHIFT		PPCSHIFT( 27)
#	define FV_TXTSRCTYPE01_ISTRANS0_MASK		PPCMASK(1, 23)
#	define FV_TXTSRCTYPE01_HASSSB0_MASK			PPCMASK(1, 22)
#	define FV_TXTSRCTYPE01_HASCOLOR0_MASK		PPCMASK(1, 21)
#	define FV_TXTSRCTYPE01_HASALPHA0_MASK		PPCMASK(1, 20)
#	define FV_TXTSRCTYPE01_ISLITERAL0_MASK		PPCMASK(1, 19)
#	define FV_TXTSRCTYPE01_ISTRANS0_SHIFT		PPCSHIFT( 23)
#	define FV_TXTSRCTYPE01_HASSSB0_SHIFT		PPCSHIFT( 22)
#	define FV_TXTSRCTYPE01_HASCOLOR0_SHIFT		PPCSHIFT( 21)
#	define FV_TXTSRCTYPE01_HASALPHA0_SHIFT		PPCSHIFT( 20)
#	define FV_TXTSRCTYPE01_ISLITERAL0_SHIFT		PPCSHIFT( 19)

#	define FV_TXTSRCTYPE01_CDEPTH1_MASK			PPCMASK(0xF, 15)
#	define FV_TXTSRCTYPE01_CDEPTH1_SHIFT		PPCSHIFT( 15)
#	define FV_TXTSRCTYPE01_ADEPTH1_MASK			PPCMASK(0xF, 11)
#	define FV_TXTSRCTYPE01_ADEPTH1_SHIFT		PPCSHIFT( 11)
#	define FV_TXTSRCTYPE01_ISTRANS1_MASK		PPCMASK(1, 7)
#	define FV_TXTSRCTYPE01_HASSSB1_MASK			PPCMASK(1, 6)
#	define FV_TXTSRCTYPE01_HASCOLOR1_MASK		PPCMASK(1, 5)
#	define FV_TXTSRCTYPE01_HASALPHA1_MASK		PPCMASK(1, 4)
#	define FV_TXTSRCTYPE01_ISLITERAL1_MASK		PPCMASK(1, 3)
#	define FV_TXTSRCTYPE01_ISTRANS1_SHIFT		PPCSHIFT( 7)
#	define FV_TXTSRCTYPE01_HASSSB1_SHIFT		PPCSHIFT( 6)
#	define FV_TXTSRCTYPE01_HASCOLOR1_SHIFT		PPCSHIFT( 5)
#	define FV_TXTSRCTYPE01_HASALPHA1_SHIFT		PPCSHIFT( 4)
#	define FV_TXTSRCTYPE01_ISLITERAL1_SHIFT		PPCSHIFT( 3)

#define RA_TXTSRCTYPE23			0x6438
#	define FV_TXTSRCTYPE23_CDEPTH2_MASK			PPCMASK(0xF, 31)
#	define FV_TXTSRCTYPE23_CDEPTH2_SHIFT		PPCSHIFT( 31)
#	define FV_TXTSRCTYPE23_ADEPTH2_MASK			PPCMASK(0xF, 27)
#	define FV_TXTSRCTYPE23_ADEPTH2_SHIFT		PPCSHIFT( 27)
#	define FV_TXTSRCTYPE23_ISTRANS2_MASK		PPCMASK(1, 23)
#	define FV_TXTSRCTYPE23_HASSSB2_MASK			PPCMASK(1, 22)
#	define FV_TXTSRCTYPE23_HASCOLOR2_MASK		PPCMASK(1, 21)
#	define FV_TXTSRCTYPE23_HASALPHA2_MASK		PPCMASK(1, 20)
#	define FV_TXTSRCTYPE23_ISLITERAL2_MASK		PPCMASK(1, 19)
#	define FV_TXTSRCTYPE23_ISTRANS2_SHIFT		PPCSHIFT( 23)
#	define FV_TXTSRCTYPE23_HASSSB2_SHIFT		PPCSHIFT( 22)
#	define FV_TXTSRCTYPE23_HASCOLOR2_SHIFT		PPCSHIFT( 21)
#	define FV_TXTSRCTYPE23_HASALPHA2_SHIFT		PPCSHIFT( 20)
#	define FV_TXTSRCTYPE23_ISLITERAL2_SHIFT		PPCSHIFT( 19)

#	define FV_TXTSRCTYPE23_CDEPTH3_MASK			PPCMASK(0xF, 15)
#	define FV_TXTSRCTYPE23_CDEPTH3_SHIFT		PPCSHIFT( 15)
#	define FV_TXTSRCTYPE23_ADEPTH3_MASK			PPCMASK(0xF, 11)
#	define FV_TXTSRCTYPE23_ADEPTH3_SHIFT		PPCSHIFT( 11)
#	define FV_TXTSRCTYPE23_ISTRANS3_MASK		PPCMASK(1, 7)
#	define FV_TXTSRCTYPE23_HASSSB3_MASK			PPCMASK(1, 6)
#	define FV_TXTSRCTYPE23_HASCOLOR3_MASK		PPCMASK(1, 5)
#	define FV_TXTSRCTYPE23_HASALPHA3_MASK		PPCMASK(1, 4)
#	define FV_TXTSRCTYPE23_ISLITERAL3_MASK		PPCMASK(1, 3)
#	define FV_TXTSRCTYPE23_ISTRANS3_SHIFT		PPCSHIFT( 7)
#	define FV_TXTSRCTYPE23_HASSSB3_SHIFT		PPCSHIFT( 6)
#	define FV_TXTSRCTYPE23_HASCOLOR3_SHIFT		PPCSHIFT( 5)
#	define FV_TXTSRCTYPE23_HASALPHA3_SHIFT		PPCSHIFT( 4)
#	define FV_TXTSRCTYPE23_ISLITERAL3_SHIFT		PPCSHIFT( 3)

#define RA_TXTEXPTYPE			0x643c
#	define FV_TXTEXPTYPE_CDEPTH_MASK			PPCMASK(0xF, 31)
#	define FV_TXTEXPTYPE_CDEPTH_SHIFT			PPCSHIFT( 31)
#	define FV_TXTEXPTYPE_ADEPTH_MASK			PPCMASK(0xF, 27)
#	define FV_TXTEXPTYPE_ADEPTH_SHIFT			PPCSHIFT( 27)
#	define FV_TXTEXPTYPE_ISTRANS_MASK			PPCMASK(1, 23)
#	define FV_TXTEXPTYPE_HASSSB_MASK			PPCMASK(1, 22)
#	define FV_TXTEXPTYPE_HASCOLOR_MASK			PPCMASK(1, 21)
#	define FV_TXTEXPTYPE_HASALPHA_MASK			PPCMASK(1, 20)
#	define FV_TXTEXPTYPE_ISLITERAL_MASK			PPCMASK(1, 19)
#	define FV_TXTEXPTYPE_ISTRANS_SHIFT			PPCSHIFT( 23)
#	define FV_TXTEXPTYPE_HASSSB_SHIFT			PPCSHIFT( 22)
#	define FV_TXTEXPTYPE_HASCOLOR_SHIFT			PPCSHIFT( 21)
#	define FV_TXTEXPTYPE_HASALPHA_SHIFT			PPCSHIFT( 20)
#	define FV_TXTEXPTYPE_ISLITERAL_SHIFT		PPCSHIFT( 19)

#	define FV_CONST_BLUE_MASK		PPCMASK(0xFF, 31)
#	define FV_CONST_BLUE_SHIFT		PPCSHIFT(31)
#	define FV_CONST_GREEN_MASK		PPCMASK(0xFF, 23)
#	define FV_CONST_GREEN_SHIFT		PPCSHIFT(23)
#	define FV_CONST_RED_MASK		PPCMASK(0xFF, 15)
#	define FV_CONST_RED_SHIFT		PPCSHIFT(15)
#	define FV_CONST_ALPHA_MASK		PPCMASK(0x7F, 7)
#	define FV_CONST_ALPHA_SHIFT		PPCSHIFT(7)
#	define FV_CONST_SSB_MASK		PPCBIT(0)
#	define FV_CONST_SSB_SHIFT		PPCSHIFT(0)

#define RA_TXTCONST0			0x6440
#	define FV_TXTCONST0_BLUE_MASK		FV_CONST_BLUE_MASK
#	define FV_TXTCONST0_BLUE_SHIFT		FV_CONST_BLUE_SHIFT
#	define FV_TXTCONST0_GREEN_MASK		FV_CONST_GREEN_MASK
#	define FV_TXTCONST0_GREEN_SHIFT		FV_CONST_GREEN_SHIFT
#	define FV_TXTCONST0_RED_MASK		FV_CONST_RED_MASK
#	define FV_TXTCONST0_RED_SHIFT		FV_CONST_RED_SHIFT
#	define FV_TXTCONST0_ALPHA_MASK		FV_CONST_ALPHA_MASK
#	define FV_TXTCONST0_ALPHA_SHIFT		FV_CONST_ALPHA_SHIFT
#	define FV_TXTCONST0_SSB_MASK		FV_CONST_SSB_MASK
#	define FV_TXTCONST0_SSB_SHIFT		FV_CONST_SSB_SHIFT

#define RA_TXTCONST1			0x6444
#	define FV_TXTCONST1_BLUE_MASK		FV_CONST_BLUE_MASK
#	define FV_TXTCONST1_BLUE_SHIFT		FV_CONST_BLUE_SHIFT
#	define FV_TXTCONST1_GREEN_MASK		FV_CONST_GREEN_MASK
#	define FV_TXTCONST1_GREEN_SHIFT		FV_CONST_GREEN_SHIFT
#	define FV_TXTCONST1_RED_MASK		FV_CONST_RED_MASK
#	define FV_TXTCONST1_RED_SHIFT		FV_CONST_RED_SHIFT
#	define FV_TXTCONST1_ALPHA_MASK		FV_CONST_ALPHA_MASK
#	define FV_TXTCONST1_ALPHA_SHIFT		FV_CONST_ALPHA_SHIFT
#	define FV_TXTCONST1_SSB_MASK		FV_CONST_SSB_MASK
#	define FV_TXTCONST1_SSB_SHIFT		FV_CONST_SSB_SHIFT

#define RA_TXTCONST2			0x6448
#	define FV_TXTCONST2_BLUE_MASK		FV_CONST_BLUE_MASK
#	define FV_TXTCONST2_BLUE_SHIFT		FV_CONST_BLUE_SHIFT
#	define FV_TXTCONST2_GREEN_MASK		FV_CONST_GREEN_MASK
#	define FV_TXTCONST2_GREEN_SHIFT		FV_CONST_GREEN_SHIFT
#	define FV_TXTCONST2_RED_MASK		FV_CONST_RED_MASK
#	define FV_TXTCONST2_RED_SHIFT		FV_CONST_RED_SHIFT
#	define FV_TXTCONST2_ALPHA_MASK		FV_CONST_ALPHA_MASK
#	define FV_TXTCONST2_ALPHA_SHIFT		FV_CONST_ALPHA_SHIFT
#	define FV_TXTCONST2_SSB_MASK		FV_CONST_SSB_MASK
#	define FV_TXTCONST2_SSB_SHIFT		FV_CONST_SSB_SHIFT

#define RA_TXTCONST3			0x644c
#	define FV_TXTCONST3_BLUE_MASK		FV_CONST_BLUE_MASK
#	define FV_TXTCONST3_BLUE_SHIFT		FV_CONST_BLUE_SHIFT
#	define FV_TXTCONST3_GREEN_MASK		FV_CONST_GREEN_MASK
#	define FV_TXTCONST3_GREEN_SHIFT		FV_CONST_GREEN_SHIFT
#	define FV_TXTCONST3_RED_MASK		FV_CONST_RED_MASK
#	define FV_TXTCONST3_RED_SHIFT		FV_CONST_RED_SHIFT
#	define FV_TXTCONST3_ALPHA_MASK		FV_CONST_ALPHA_MASK
#	define FV_TXTCONST3_ALPHA_SHIFT		FV_CONST_ALPHA_SHIFT
#	define FV_TXTCONST3_SSB_MASK		FV_CONST_SSB_MASK
#	define FV_TXTCONST3_SSB_SHIFT		FV_CONST_SSB_SHIFT

#define	RA_DBUSERCONTROL		0x8008
#	define FV_DBUSERCONTROL_ZBUFFEN_MASK		PPCBIT(21)	/* Enable Z buffering  */
#	define FV_DBUSERCONTROL_ZBUFFEN_SHIFT		PPCSHIFT(21)
#	define FV_DBUSERCONTROL_ZOUTEN_MASK			PPCBIT(22)	/* Enable Z buffer output */
#	define FV_DBUSERCONTROL_ZOUTEN_SHIFT		PPCSHIFT(22)
#	define FV_DBUSERCONTROL_WINCLIPINEN_MASK	PPCBIT(23)	/* Enable Clipping inside clip range */
#	define FV_DBUSERCONTROL_WINCLIPINEN_SHIFT 	PPCSHIFT(23)	
#	define FV_DBUSERCONTROL_WINCLIPOUTEN_MASK 	PPCBIT(24)	/* Enable Clipping outside clip range */
#	define FV_DBUSERCONTROL_WINCLIPOUTEN_SHIFT 	PPCSHIFT(24)
#	define FV_DBUSERCONTROL_BLENDEN_MASK		PPCBIT(25)	/* Enable Color, */
#	define FV_DBUSERCONTROL_BLENDEN_SHIFT		PPCSHIFT(25) /* Alpha, & DSB blending. */
#	define FV_DBUSERCONTROL_SRCEN_MASK			PPCBIT(26)	/* Enable Color, */
#	define FV_DBUSERCONTROL_SRCEN_SHIFT			PPCSHIFT(26) /* Alpha, & DSB blending. */
#	define FV_DBUSERCONTROL_DITHEREN_MASK		PPCBIT(27)	/* Enable dithering */
#	define FV_DBUSERCONTROL_DITHEREN_SHIFT		PPCSHIFT(27)	/* for output to 555 */
#	define FV_DBUSERCONTROL_DESTOUTMASK_MASK	PPCMASK(0x0F, 31) /* OutEn Bit Enable byte output  */
#	define FV_DBUSERCONTROL_DESTOUTMASK_SHIFT 	PPCSHIFT(31)
#		define RC_DBUSERCONTROL_DESTOUTMASK_ALPHA		8
#		define RC_DBUSERCONTROL_DESTOUTMASK_RED			4
#		define RC_DBUSERCONTROL_DESTOUTMASK_GREEN		2
#		define RC_DBUSERCONTROL_DESTOUTMASK_BLUE		1

#define	RA_DBDISCARDCONTROL		0x800c
#	define	FV_DBDISCARDCONTROL_ZCLIPPED_MASK	PPCBIT(28) /* Enable pixel discard when outside */
#	define	FV_DBDISCARDCONTROL_ZCLIPPED_SHIFT	PPCSHIFT(28) /*   Z buffer region. */
#	define	FV_DBDISCARDCONTROL_SSB0_MASK		PPCBIT(29)	/* Enables pixel discards based on SSB */
#	define	FV_DBDISCARDCONTROL_SSB0_SHIFT		PPCSHIFT(29)
#	define	FV_DBDISCARDCONTROL_RGB0_MASK		PPCBIT(30)		/* Enable pixel discards if */
#	define	FV_DBDISCARDCONTROL_RGB0_SHIFT		PPCSHIFT(30)	/*  R == G == B == 0 */
#	define	FV_DBDISCARDCONTROL_ALPHA0_MASK		PPCBIT(31)		/* Enables pixel discards based on */
#	define	FV_DBDISCARDCONTROL_ALPHA0_SHIFT	PPCSHIFT(31)	/* Abl==0  */

#define	RA_DBSTATUS				0x8010

#define	RA_DBINTCNTL			0x8014
#	define FV_DBINTCNTL_ALUSTAT_MASK		PPCMASK(0x1FF,28)
#	define FV_DBINTCNTL_ALUSTAT_SHIFT		PPCSHIFT(28)
#	define FV_DBINTCNTL_ZFUNCSTAT_MASK		PPCMASK(7,31)
#	define FV_DBINTCNTL_ZFUNCSTAT_SHIFT		PPCSHIFT(31)

#define	RA_DBXWINCLIP			0x801c
#	define FV_DBXWINCLIP_XWINCLIPMIN_MASK	PPCMASK(0x7FF, 15) /*  RW X window clip min (left) */
#	define FV_DBXWINCLIP_XWINCLIPMIN_SHIFT	PPCSHIFT(15) 
#	define FV_DBXWINCLIP_XWINCLIPMAX_MASK	PPCMASK(0x7FF, 31) /*  RW X window clip max (right) */
#	define FV_DBXWINCLIP_XWINCLIPMAX_SHIFT	PPCSHIFT(31)	

#define	RA_DBYWINCLIP			0x8020
#	define FV_DBYWINCLIP_YWINCLIPMIN_MASK	PPCMASK(0x7FF, 15) /*  RW Y window clip min (left) */
#	define FV_DBYWINCLIP_YWINCLIPMIN_SHIFT	PPCSHIFT(15)
#	define FV_DBYWINCLIP_YWINCLIPMAX_MASK	PPCMASK(0x7FF, 31) /*  RW Y window clip max (right) */
#	define FV_DBYWINCLIP_YWINCLIPMAX_SHIFT	PPCSHIFT(31)

#define	RA_DBSRCCNTL			0x8030
#	define	FV_DBSRCCNTL_SRCMSBREP_MASK		PPCBIT(30)	/*Replicate 3 MSBs into 3 LSBs */
#	define	FV_DBSRCCNTL_SRCMSBREP_SHIFT 	PPCSHIFT(30)/* if left justified (otherwise insert zeros) */
#	define	FV_DBSRCCNTL_SRC32BPP_MASK		PPCBIT(31)	/* Src pixel format (16 or 32 bpp) */
#	define	FV_DBSRCCNTL_SRC32BPP_SHIFT		PPCSHIFT(31)	

#define	RA_DBSRCBASEADDR		0x8034
#define	RA_DBSRCXSTRIDE			0x8038
#	define	FV_DBSRCXSTRIDE_XSTRIDE_MASK	PPCMASK(0x07FF,31)
#	define	FV_DBSRCXSTRIDE_XSTRIDE_SHIFT	PPCSHIFT(31)

#define	RA_DBSRCOFFSET			0x803c
#	define FV_DBSRCOFFSET_XOFFSET_MASK	PPCMASK(0xFFF, 15)	/* S_Fix RW X Offset  */
#	define FV_DBSRCOFFSET_XOFFSET_SHIFT	PPCSHIFT(15)
#	define FV_DBSRCOFFSET_YOFFSET_MASK	PPCMASK(0xFFF, 31)	/* S_Fix RW Y Offset  */
#	define FV_DBSRCOFFSET_YOFFSET_SHIFT	PPCSHIFT(31)

#define	RA_DBZCNTL				0x8040
#	define FV_DBZCNTL_ZUPDATEONGREATERZ_MASK	PPCBIT(26) /* NEW Z > CURRENT Z, UPDATE Z */
#	define FV_DBZCNTL_ZUPDATEONGREATERZ_SHIFT	PPCSHIFT(26)
#	define FV_DBZCNTL_PIXOUTONGREATERZ_MASK		PPCBIT(27) /* NEW Z > CURRENT Z, UPDATE PIX */
#	define FV_DBZCNTL_PIXOUTONGREATERZ_SHIFT	PPCSHIFT(27)
#	define FV_DBZCNTL_ZUPDATEONEQUALZ_MASK		PPCBIT(28) /* NEW Z == CURRENT Z, UPDATE Z */
#	define FV_DBZCNTL_ZUPDATEONEQUALZ_SHIFT		PPCSHIFT(28)
#	define FV_DBZCNTL_PIXOUTONEQUALZ_MASK		PPCBIT(29) /* NEW Z == CURRENT Z, UPDATE PIX */
#	define FV_DBZCNTL_PIXOUTONEQUALZ_SHIFT		PPCSHIFT(29)
#	define FV_DBZCNTL_ZUPDATEONSMALLERZ_MASK	PPCBIT(30) /* NEW Z < CURRENT Z, UPDATE Z */
#	define FV_DBZCNTL_ZUPDATEONSMALLERZ_SHIFT	PPCSHIFT(30)
#	define FV_DBZCNTL_PIXOUTONSMALLERZ_MASK		PPCBIT(31) /* NEW Z < CURRENT Z, UPDATE PIX */
#	define FV_DBZCNTL_PIXOUTONSMALLERZ_SHIFT	PPCSHIFT(31)

#define	RA_DBZOFFSET			0x8048
#	define FV_DBZOFFSET_ZXOFFSET_MASK	PPCMASK(0xFFF, 15)	/* S_Fix RW X Offset for Z */
#	define FV_DBZOFFSET_ZXOFFSET_SHIFT	PPCSHIFT(15)
#	define FV_DBZOFFSET_ZYOFFSET_MASK	PPCMASK(0xFFF, 31)	/* S_Fix RW Y Offset for Z */
#	define FV_DBZOFFSET_ZYOFFSET_SHIFT	PPCSHIFT(31)

#define	RA_DBSSBDSBCNTL			0x8050
#	define FV_DBSSBDSBCNTL_DSBCONST_MASK		PPCBIT(29)	/* RWSC	DSB Constant */
#	define FV_DBSSBDSBCNTL_DSBCONST_SHIFT	PPCSHIFT(29)
#	define FV_DBSSBDSBCNTL_DSBSELECT_MASK	PPCMASK(3,31)	/* Select DSB generation 0->use SSB, */
#	define FV_DBSSBDSBCNTL_DSBSELECT_SHIFT 	PPCSHIFT(31)	/* 1->use const, 2->use source input. */
#		define RC_DBSSBDSBCNTL_DSBSELECT_OBJSSB		0	
#		define RC_DBSSBDSBCNTL_DSBSELECT_CONST		1	
#		define RC_DBSSBDSBCNTL_DSBSELECT_SRCSSB		2	

#define	RA_DBCONSTIN			0x8054
#	define FV_DBCONSTIN_RED_MASK	FV_CONST_RED_MASK
#	define FV_DBCONSTIN_RED_SHIFT	FV_CONST_RED_SHIFT
#	define FV_DBCONSTIN_GREEN_MASK	FV_CONST_GREEN_MASK
#	define FV_DBCONSTIN_GREEN_SHIFT	FV_CONST_GREEN_SHIFT
#	define FV_DBCONSTIN_BLUE_MASK	FV_CONST_BLUE_MASK
#	define FV_DBCONSTIN_BLUE_SHIFT	FV_CONST_BLUE_SHIFT

#define	RA_DBAMULTCNTL		0x8058
#	define FV_DBAMULTCNTL_AINPUTSELECT_MASK				PPCMASK(3, 25)	/* Choose texture, const, */
#	define FV_DBAMULTCNTL_AINPUTSELECT_SHIFT			PPCSHIFT(25)	/* or 1-Cs for texture input */
#		define RC_DBAMULTCNTL_AINPUTSELECT_TEXCOLOR				0
#		define RC_DBAMULTCNTL_AINPUTSELECT_CONSTCOLOR			1
#		define RC_DBAMULTCNTL_AINPUTSELECT_SRCCOLORCOMPLEMENT	2
#		define RC_DBAMULTCNTL_AINPUTSELECT_TEXALPHA				3
#	define FV_DBAMULTCNTL_AMULTCOEFSELECT_MASK			PPCMASK(0x19, 30)	/* Choose Txt coefficient */
#	define FV_DBAMULTCNTL_AMULTCOEFSELECT_SHIFT			PPCSHIFT(30)
#		define RC_DBAMULTCNTL_AMULTCOEFSELECT_TEXALPHA				0x00
#		define RC_DBAMULTCNTL_AMULTCOEFSELECT_SRCALPHA				0x08
#		define RC_DBAMULTCNTL_AMULTCOEFSELECT_CONST					0x10
#		define RC_DBAMULTCNTL_AMULTCOEFSELECT_SRCCOLOR				0x18
#		define RC_DBAMULTCNTL_AMULTCOEFSELECT_TEXALPHACOMPLEMENT	0x01
#		define RC_DBAMULTCNTL_AMULTCOEFSELECT_SRCALPHACOMPLEMENT	0x09
#		define RC_DBAMULTCNTL_AMULTCOEFSELECT_CONSTCOMPLEMENT		0x11
#		define RC_DBAMULTCNTL_AMULTCOEFSELECT_SRCCOLORCOMPLEMENT	0x19
#	define FV_DBAMULTCNTL_AMULTCONSTCONTROL_MASK		PPCMASK(3, 29)	/* Choose const controller */
#	define FV_DBAMULTCNTL_AMULTCONSTCONTROL_SHIFT		PPCSHIFT(29)
#		define RC_DBAMULTCNTL_AMULTCONSTCONTROL_TEXSSB			0
#		define RC_DBAMULTCNTL_AMULTCONSTCONTROL_SRCSSB			1
#	define FV_DBAMULTCNTL_AMULTRJUSTIFY_MASK			PPCBIT(31)	/* shift right 888 txtr values to 555*/
#	define FV_DBAMULTCNTL_AMULTRJUSTIFY_SHIFT			PPCSHIFT(31)	

#define	RA_DBAMULTCONSTSSB0		0x805c
#	define FV_DBAMULTCONSTSSB0_RED_MASK		FV_CONST_RED_MASK
#	define FV_DBAMULTCONSTSSB0_RED_SHIFT	FV_CONST_RED_SHIFT
#	define FV_DBAMULTCONSTSSB0_GREEN_MASK	FV_CONST_GREEN_MASK
#	define FV_DBAMULTCONSTSSB0_GREEN_SHIFT	FV_CONST_GREEN_SHIFT
#	define FV_DBAMULTCONSTSSB0_BLUE_MASK	FV_CONST_BLUE_MASK
#	define FV_DBAMULTCONSTSSB0_BLUE_SHIFT	FV_CONST_BLUE_SHIFT


#define	RA_DBAMULTCONSTSSB1		0x8060
#	define FV_DBAMULTCONSTSSB1_RED_MASK		FV_CONST_RED_MASK
#	define FV_DBAMULTCONSTSSB1_RED_SHIFT	FV_CONST_RED_SHIFT
#	define FV_DBAMULTCONSTSSB1_GREEN_MASK	FV_CONST_GREEN_MASK
#	define FV_DBAMULTCONSTSSB1_GREEN_SHIFT	FV_CONST_GREEN_SHIFT
#	define FV_DBAMULTCONSTSSB1_BLUE_MASK	FV_CONST_BLUE_MASK
#	define FV_DBAMULTCONSTSSB1_BLUE_SHIFT	FV_CONST_BLUE_SHIFT

#define	RA_DBBMULTCNTL		0x8064
#	define FV_DBBMULTCNTL_BINPUTSELECT_MASK				PPCMASK(3, 25)	/* Choose source or const */
#	define FV_DBBMULTCNTL_BINPUTSELECT_SHIFT			PPCSHIFT(25)	/* 	for source input */ 
#		define RC_DBBMULTCNTL_BINPUTSELECT_SRCCOLOR				0
#		define RC_DBBMULTCNTL_BINPUTSELECT_CONSTCOLOR			1
#		define RC_DBBMULTCNTL_BINPUTSELECT_TEXCOLORCOMPLEMENT	2
#		define RC_DBBMULTCNTL_BINPUTSELECT_SRCALPHA				3
#	define FV_DBBMULTCNTL_BMULTCOEFSELECT_MASK			PPCMASK(0x19, 30)	/* Choose Src coef */
#	define FV_DBBMULTCNTL_BMULTCOEFSELECT_SHIFT			PPCSHIFT(30)
#		define RC_DBBMULTCNTL_BMULTCOEFSELECT_TEXALPHA				0x00
#		define RC_DBBMULTCNTL_BMULTCOEFSELECT_SRCALPHA				0x08
#		define RC_DBBMULTCNTL_BMULTCOEFSELECT_CONST					0x10
#		define RC_DBBMULTCNTL_BMULTCOEFSELECT_TEXCOLOR				0x18
#		define RC_DBBMULTCNTL_BMULTCOEFSELECT_TEXALPHACOMPLEMENT	0x01
#		define RC_DBBMULTCNTL_BMULTCOEFSELECT_SRCALPHACOMPLEMENT	0x09
#		define RC_DBBMULTCNTL_BMULTCOEFSELECT_CONSTCOMPLEMENT		0x11
#		define RC_DBBMULTCNTL_BMULTCOEFSELECT_TEXCOLORCOMPLEMENT	0x19
#	define FV_DBBMULTCNTL_BMULTCONSTCONTROL_MASK		PPCMASK(3, 29)	/* Choose const controller */
#	define FV_DBBMULTCNTL_BMULTCONSTCONTROL_SHIFT 		PPCSHIFT(29)
#		define RC_DBBMULTCNTL_BMULTCONSTCONTROL_TEXSSB			0
#		define RC_DBBMULTCNTL_BMULTCONSTCONTROL_SRCSSB			1
#	define FV_DBBMULTCNTL_BMULTRJUSTIFY_MASK			PPCBIT(31)		/*shift right 888 src vals to 555*/
#	define FV_DBBMULTCNTL_BMULTRJUSTIFY_SHIFT			PPCSHIFT(31)	/* (default is 888) */

#define	RA_DBBMULTCONSTSSB0		0x8068
#	define FV_DBBMULTCONSTSSB0_RED_MASK		FV_CONST_RED_MASK
#	define FV_DBBMULTCONSTSSB0_RED_SHIFT	FV_CONST_RED_SHIFT
#	define FV_DBBMULTCONSTSSB0_GREEN_MASK	FV_CONST_GREEN_MASK
#	define FV_DBBMULTCONSTSSB0_GREEN_SHIFT	FV_CONST_GREEN_SHIFT
#	define FV_DBBMULTCONSTSSB0_BLUE_MASK	FV_CONST_BLUE_MASK
#	define FV_DBBMULTCONSTSSB0_BLUE_SHIFT	FV_CONST_BLUE_SHIFT

#define	RA_DBBMULTCONSTSSB1		0x806c
#	define FV_DBBMULTCONSTSSB1_RED_MASK		FV_CONST_RED_MASK
#	define FV_DBBMULTCONSTSSB1_RED_SHIFT	FV_CONST_RED_SHIFT
#	define FV_DBBMULTCONSTSSB1_GREEN_MASK	FV_CONST_GREEN_MASK
#	define FV_DBBMULTCONSTSSB1_GREEN_SHIFT	FV_CONST_GREEN_SHIFT
#	define FV_DBBMULTCONSTSSB1_BLUE_MASK	FV_CONST_BLUE_MASK
#	define FV_DBBMULTCONSTSSB1_BLUE_SHIFT	FV_CONST_BLUE_SHIFT

#define	RA_DBALUCNTL			0x8070
#	define FV_DBALUCNTL_ALUOPERATION_MASK			PPCMASK(0x1F, 28)	/* ALU selection (arith/bool,  */
#	define FV_DBALUCNTL_ALUOPERATION_SHIFT			PPCSHIFT(28)		/* clamp, bool selection, ...) */
#		define RC_DBALUCNTL_ALUOPERATION_A_PLUS_BCLAMP		0x0
#		define RC_DBALUCNTL_ALUOPERATION_A_PLUS_B			0x2
#		define RC_DBALUCNTL_ALUOPERATION_A_MINUS_BCLAMP		0x8
#		define RC_DBALUCNTL_ALUOPERATION_A_MINUS_B			0xa
#		define RC_DBALUCNTL_ALUOPERATION_B_MINUS_ACLAMP		0xc
#		define RC_DBALUCNTL_ALUOPERATION_B_MINUS_A			0xe
#		define RC_DBALUCNTL_ALUOPERATION_OUTPUTZERO			0x10
#		define RC_DBALUCNTL_ALUOPERATION_NEITHER			0x11
#		define RC_DBALUCNTL_ALUOPERATION_NOTA_AND_B			0x12
#		define RC_DBALUCNTL_ALUOPERATION_NOTA				0x13
#		define RC_DBALUCNTL_ALUOPERATION_NOTB_AND_A			0x14
#		define RC_DBALUCNTL_ALUOPERATION_NOTB				0x15
#		define RC_DBALUCNTL_ALUOPERATION_XOR				0x16
#		define RC_DBALUCNTL_ALUOPERATION_NOT_A_AND_B		0x17
#		define RC_DBALUCNTL_ALUOPERATION_A_AND_B			0x18
#		define RC_DBALUCNTL_ALUOPERATION_ONEONEQUAL			0x19
#		define RC_DBALUCNTL_ALUOPERATION_B					0x1a
#		define RC_DBALUCNTL_ALUOPERATION_NOTA_OR_B			0x1b
#		define RC_DBALUCNTL_ALUOPERATION_A					0x1c
#		define RC_DBALUCNTL_ALUOPERATION_NOTB_OR_A			0x1d
#		define RC_DBALUCNTL_ALUOPERATION_A_OR_B				0x1e
#		define RC_DBALUCNTL_ALUOPERATION_OUTPUTONE			0x1f
#	define FV_DBALUCNTL_FINALDIVIDE_MASK	PPCMASK(0x07,31)	/* Final shift 0,1, or 2 */
#	define FV_DBALUCNTL_FINALDIVIDE_SHIFT	PPCSHIFT(31)

#define	RA_DBSRCALPHACNTL		0x8074
#	define FV_DBSRCALPHACNTL_ACLAMP_MASK	PPCMASK(0x3F, 31) 	/* Specify clamping option for 3 */
#	define FV_DBSRCALPHACNTL_ACLAMP_SHIFT 	PPCSHIFT(31)		/* alpha ranges (3 @ 2 bit) */
#		define RC_DBSRCALPHACNTL_ACLAMP_LEAVEALONE		0
#		define RC_DBSRCALPHACNTL_ACLAMP_FORCE1			1
#		define RC_DBSRCALPHACNTL_ACLAMP_FORCE0			2
#	define FV_DBSRCALPHACNTL_ALPHA1_MASK		PPCMASK(3, 27) 	/* 2 bit field for alpha == 0xff */
#	define FV_DBSRCALPHACNTL_ALPHA1_SHIFT 		PPCSHIFT(27)	
#	define FV_DBSRCALPHACNTL_ALPHAFRAC_MASK		PPCMASK(3, 29) 	/* 2 bit field for fracitonal alpha */
#	define FV_DBSRCALPHACNTL_ALPHAFRAC_SHIFT 	PPCSHIFT(29)	
#	define FV_DBSRCALPHACNTL_ALPHA0_MASK		PPCMASK(3, 31) 	/* 2 bit field for alpha == 0 */
#	define FV_DBSRCALPHACNTL_ALPHA0_SHIFT 		PPCSHIFT(31)	

#define	RA_DBDESTALPHACNTL		0x8078
#	define FV_DBDESTALPHACNTL_DESTCONSTSELECT_MASK	PPCMASK(0xf, 31)	/* Combines meta select and sel */
#	define FV_DBDESTALPHACNTL_DESTCONSTSELECT_SHIFT	PPCSHIFT(31)
#		define RC_DBDESTALPHACNTL_DESTCONSTSELECT_TEXALPHA			0
#		define RC_DBDESTALPHACNTL_DESTCONSTSELECT_TEXSSBCONST		1
#		define RC_DBDESTALPHACNTL_DESTCONSTSELECT_SRCSSBCONST		9
#		define RC_DBDESTALPHACNTL_DESTCONSTSELECT_SRCALPHA			2
#		define RC_DBDESTALPHACNTL_DESTCONSTSELECT_RBLEND			3


#define	RA_DBDESTALPHACONST		0x807c
#	define FV_DBDESTALPHACONST_DESTALPHACONSTSSB0_MASK	PPCMASK(0xFF, 15)/*  RW	Dest Alpha Constant 0 */
#	define FV_DBDESTALPHACONST_DESTALPHACONSTSSB0_SHIFT	PPCSHIFT(15)
#	define FV_DBDESTALPHACONST_DESTALPHACONSTSSB1_MASK	PPCMASK(0xFF,31)/*  RW	Dest Alpha Constant 1 */
#	define FV_DBDESTALPHACONST_DESTALPHACONSTSSB1_SHIFT	PPCSHIFT(31)

#define	RA_DBDITHERMATRIXA			0x8080
#	define FV_DBDITHERMATRIXA_X0Y0_MASK		PPCMASK(0xf,3)
#	define FV_DBDITHERMATRIXA_X0Y0_SHIFT	PPCSHIFT(3)
#	define FV_DBDITHERMATRIXA_X1Y0_MASK		PPCMASK(0xf,7)
#	define FV_DBDITHERMATRIXA_X1Y0_SHIFT	PPCSHIFT(7)
#	define FV_DBDITHERMATRIXA_X2Y0_MASK		PPCMASK(0xf,11)
#	define FV_DBDITHERMATRIXA_X2Y0_SHIFT	PPCSHIFT(11)
#	define FV_DBDITHERMATRIXA_X3Y0_MASK		PPCMASK(0xf,15)
#	define FV_DBDITHERMATRIXA_X3Y0_SHIFT	PPCSHIFT(15)
#	define FV_DBDITHERMATRIXA_X0Y1_MASK		PPCMASK(0xf,19)
#	define FV_DBDITHERMATRIXA_X0Y1_SHIFT	PPCSHIFT(19)
#	define FV_DBDITHERMATRIXA_X1Y1_MASK		PPCMASK(0xf,23)
#	define FV_DBDITHERMATRIXA_X1Y1_SHIFT	PPCSHIFT(23)
#	define FV_DBDITHERMATRIXA_X2Y1_MASK		PPCMASK(0xf,27)
#	define FV_DBDITHERMATRIXA_X2Y1_SHIFT	PPCSHIFT(27)
#	define FV_DBDITHERMATRIXA_X3Y1_MASK		PPCMASK(0xf,31)
#	define FV_DBDITHERMATRIXA_X3Y1_SHIFT	PPCSHIFT(31)

#define	RA_DBDITHERMATRIXB			0x8084
#	define FV_DBDITHERMATRIXB_X0Y2_MASK		PPCMASK(0xf,3)
#	define FV_DBDITHERMATRIXB_X0Y2_SHIFT	PPCSHIFT(3)
#	define FV_DBDITHERMATRIXB_X1Y2_MASK		PPCMASK(0xf,7)
#	define FV_DBDITHERMATRIXB_X1Y2_SHIFT	PPCSHIFT(7)
#	define FV_DBDITHERMATRIXB_X2Y2_MASK		PPCMASK(0xf,11)
#	define FV_DBDITHERMATRIXB_X2Y2_SHIFT	PPCSHIFT(11)
#	define FV_DBDITHERMATRIXB_X3Y2_MASK		PPCMASK(0xf,15)
#	define FV_DBDITHERMATRIXB_X3Y2_SHIFT	PPCSHIFT(15)
#	define FV_DBDITHERMATRIXB_X0Y3_MASK		PPCMASK(0xf,19)
#	define FV_DBDITHERMATRIXB_X0Y3_SHIFT	PPCSHIFT(19)
#	define FV_DBDITHERMATRIXB_X1Y3_MASK		PPCMASK(0xf,23)
#	define FV_DBDITHERMATRIXB_X1Y3_SHIFT	PPCSHIFT(23)
#	define FV_DBDITHERMATRIXB_X2Y3_MASK		PPCMASK(0xf,27)
#	define FV_DBDITHERMATRIXB_X2Y3_SHIFT	PPCSHIFT(27)
#	define FV_DBDITHERMATRIXB_X3Y3_MASK		PPCMASK(0xf,31)
#	define FV_DBDITHERMATRIXB_X3Y3_SHIFT	PPCSHIFT(31)

#define RC_WRITE_REGISTER	0x10000000
#define	RC_WRITE_VERTEX		0x20000000
#define	RC_WRITE_POINT		0x40000000
#define RC_CLEAR_REGISTER	RC_WRITE_REGISTER | 0x00001800
#define RC_SET_REGISTER		RC_WRITE_REGISTER | 0x00001000

/* Creates word for writing to n registers starting at reg */

#define CLT_RegistersHeader(reg, cnt) (PPCMASK(((cnt-1)&0xFF), 15) | (RA_##reg)&0x0000FFFF)
#define CLT_WriteRegistersHeader(reg, cnt) (RC_WRITE_REGISTER | CLT_RegistersHeader(reg, cnt))
#define CLT_SetRegistersHeader(reg, cnt) 	(RC_SET_REGISTER | CLT_RegistersHeader(reg, cnt))
#define CLT_ClearRegistersHeader(reg, cnt) (RC_CLEAR_REGISTER | CLT_RegistersHeader(reg, cnt))


#define CLT_WriteRegister(ptr, reg, val) \
	*ptr++ = (uint32) CLT_WriteRegistersHeader(reg,1); \
	*ptr++ = (uint32)val

#define CLT_Write2Registers(ptr, reg, val1, val2) \
	*ptr++ = (uint32)CLT_WriteRegistersHeader(reg,2); \
	*ptr++ = (uint32)val1; \
	*ptr++ = (uint32)val2 

#define CLT_SetRegister(ptr, reg, v) \
	*ptr++ = (uint32)CLT_SetRegistersHeader(reg,1); \
	*ptr++ = (uint32)v

#define CLT_ClearRegister(ptr, reg, v) \
	*ptr++ = (uint32)CLT_ClearRegistersHeader(reg,1); \
	*ptr++ = (uint32)v

#define CLT_Sync(pp)				CLT_WriteRegister((*pp),	DCNTL, \
													  CLT_Bits(DCNTL, SYNC, 1))

#define CLT_Pause(pp)				CLT_WriteRegister((*pp),	DCNTL, \
													  CLT_Bits(DCNTL, PSE, 1))

#define CLT_Interrupt(pp, ival)		CLT_Write2Registers((*pp),	DCNTLDATA, ival, \
														CLT_Bits(DCNTL, DINT, 1))

#define CLT_JumpRelative(pp, address)		CLT_Write2Registers((*pp),	DCNTLDATA, address, \
																CLT_Bits(DCNTL, JR, 1))

#define CLT_JumpAbsolute(pp, address)		CLT_Write2Registers((*pp),	DCNTLDATA, address, \
																CLT_Bits(DCNTL, JA, 1))

#define CLT_TxLoad(pp)				 		CLT_WriteRegister((*pp),	DCNTL, \
															  CLT_Bits(DCNTL, TLD, 1))

/* Texture mapper */

#define CLA_TXLDCNTL(compressed, loadmode, srcbitoff)\
					  (CLT_Bits(TXTLDCNTL, COMPRESSED, compressed) | \
					   CLT_Bits(TXTLDCNTL, LOADMODE, loadmode) | \
					   CLT_Bits(TXTLDCNTL, SRCBITOFF, srcbitoff))

#define CLT_TXLDCNTL(pp, compressed, loadmode, srcbitoff)\
	CLT_WriteRegister((*pp), TXTLDCNTL,  CLA_TXLDCNTL(compressed, loadmode, srcbitoff))


#define CLA_TXTADDRCNTL(textureenable, minfilter, interfilter, magfilter, lodmax) \
					  (CLT_Bits(TXTADDRCNTL, TEXTUREENABLE, textureenable) | \
					   CLT_Bits(TXTADDRCNTL, MINFILTER, minfilter) | \
					   CLT_Bits(TXTADDRCNTL, INTERFILTER, interfilter) | \
					   CLT_Bits(TXTADDRCNTL, MAGFILTER, magfilter) | \
					   CLT_Bits(TXTADDRCNTL, LODMAX, lodmax))

#define CLT_TXTADDRCNTL(pp, textureenable, minfilter, interfilter, magfilter, lodmax) \
	CLT_WriteRegister((*pp), TXTADDRCNTL, \
					  CLA_TXTADDRCNTL(textureenable, minfilter, interfilter, magfilter, lodmax))

#define CLA_TXTPIPCNTL(pipindexoffset, pipcolorselect, pipalphaselect, pipssbselect) \
					  (CLT_Bits(TXTPIPCNTL, PIPINDEXOFFSET, pipindexoffset) | \
					   CLT_Bits(TXTPIPCNTL, PIPCOLORSELECT, pipcolorselect) | \
					   CLT_Bits(TXTPIPCNTL, PIPALPHASELECT, pipalphaselect) | \
					   CLT_Bits(TXTPIPCNTL, PIPSSBSELECT, pipssbselect))

#define CLT_TXTPIPCNTL(pp, pipindexoffset, pipcolorselect, pipalphaselect, pipssbselect) \
	CLT_WriteRegister((*pp), TXTPIPCNTL,  \
					  CLA_TXTPIPCNTL(pipindexoffset, pipcolorselect, pipalphaselect, pipssbselect))

#define CLT_TxControl(pp, a, p, b) \
	*(*pp)++ = (uint32)CLT_WriteRegistersHeader(TXTADDRCNTL,3); \
    *(*pp)++ = (uint32)a; \
    *(*pp)++ = (uint32)p; \
    *(*pp)++ = (uint32)b; 

#define CLA_TXTTABCNTL(firstcolor, secondcolor, thirdcolor, firstalpha, secondalpha, \
					  colorout, alphaout, blendop) \
					  (CLT_Bits(TXTTABCNTL, FIRSTCOLOR, firstcolor) | \
					   CLT_Bits(TXTTABCNTL, SECONDCOLOR, secondcolor) | \
					   CLT_Bits(TXTTABCNTL, THIRDCOLOR, thirdcolor) |  \
					   CLT_Bits(TXTTABCNTL, FIRSTALPHA, firstalpha) | \
					   CLT_Bits(TXTTABCNTL, SECONDALPHA, secondalpha) | \
					   CLT_Bits(TXTTABCNTL, COLOROUT, colorout) | \
					   CLT_Bits(TXTTABCNTL, ALPHAOUT, alphaout) | \
					   CLT_Bits(TXTTABCNTL, BLENDOP, blendop))

#define CLT_TXTTABCNTL(pp, firstcolor, secondcolor, thirdcolor, firstalpha, secondalpha, \
					  colorout, alphaout, blendop) \
	CLT_WriteRegister((*pp), TXTTABCNTL, \
					  CLA_TXTTABCNTL(firstcolor, secondcolor, thirdcolor, firstalpha, secondalpha, \
					  colorout, alphaout, blendop)) \

#define CLT_TxLoad4LOD(pp, b0, b1, b2, b3) \
	*(*pp)++ = (uint32)CLT_WriteRegistersHeader(TXTLODBASE0, 4); \
    *(*pp)++ = (uint32)b0; \
    *(*pp)++ = (uint32)b1; \
    *(*pp)++ = (uint32)b2; \
    *(*pp)++ = (uint32)b3;

#define CLT_TXLODBASE0(pp, x)				CLT_WriteRegister((*pp), TXTLODBASE0, x)
#define CLT_TXLODBASE1(pp, x)				CLT_WriteRegister((*pp), TXTLODBASE1, x)
#define CLT_TXLODBASE2(pp, x)				CLT_WriteRegister((*pp), TXTLODBASE2, x)
#define CLT_TXLODBASE3(pp, x)				CLT_WriteRegister((*pp), TXTLODBASE3, x)

#define CLT_TXTLDSRCADDR(pp, x)				CLT_WriteRegister((*pp), TXTLDSRCADDR, x)
#define CLA_TXTCOUNT(x)						CLT_Bits(TXTCOUNT, VALUE, x)
#define CLT_TXTCOUNT(pp, x)					CLT_WriteRegister((*pp), TXTCOUNT,CLA_TXTCOUNT(x))

#define CLA_TXUVMAX(umax, vmax) \
											(CLT_Bits(TXTUVMAX, UMAX, umax) | \
											 CLT_Bits(TXTUVMAX, VMAX, vmax))

#define CLT_TXUVMAX(pp, umax, vmax)			CLT_WriteRegister((*pp), TXTUVMAX, \
															  CLA_TXUVMAX(umax, vmax))

#define CLA_TXUVMASK(umask, vmask) \
										  	(CLT_Bits(TXTUVMASK, UMASK, umask) | \
											 CLT_Bits(TXTUVMASK, VMASK, vmask))
#define CLT_TXUVMASK(pp, umask, vmask)		CLT_WriteRegisterC((*pp), TXTUVMASK, \
															   CLA_TXUVMASK(umask, vmask))

#define CLA_TXSRCTYPE01(cdepth0, adepth0, istrans0, hasssb0, hascolor0, hasalpha0, isliteral0, \
						cdepth1, adepth1, istrans1, hasssb1, hascolor1, hasalpha1, isliteral1) \
					  (CLT_Bits(TXTSRCTYPE01, CDEPTH0, cdepth) |\
					   CLT_Bits(TXTSRCTYPE01, ADEPTH0, adepth) |\
					   CLT_Bits(TXTSRCTYPE01, ISTRANS0, istrans) |\
					   CLT_Bits(TXTSRCTYPE01, HASSSB0, hasssb) |\
					   CLT_Bits(TXTSRCTYPE01, HASCOLOR0, hascolor) |\
					   CLT_Bits(TXTSRCTYPE01, HASALPHA0, hasalpha) |\
					   CLT_Bits(TXTSRCTYPE01, ISLITERAL0, isliteral) |\
					   CLT_Bits(TXTSRCTYPE01, CDEPTH1, cdepth) |\
					   CLT_Bits(TXTSRCTYPE01, ADEPTH1, adepth) |\
					   CLT_Bits(TXTSRCTYPE01, ISTRANS1, istrans) |\
					   CLT_Bits(TXTSRCTYPE01, HASSSB1, hasssb) |\
					   CLT_Bits(TXTSRCTYPE01, HASCOLOR1, hascolor) |\
					   CLT_Bits(TXTSRCTYPE01, HASALPHA1, hasalpha) |\
					   CLT_Bits(TXTSRCTYPE01, ISLITERAL1, isliteral))

#define CLT_TXSRCTYPE01(pp, cdepth0, adepth0, istrans0, hasssb0, hascolor0, hasalpha0, isliteral0, \
						cdepth1, adepth1, istrans1, hasssb1, hascolor1, hasalpha1, isliteral1) \
	CLT_WriteRegister((*pp), TXTSRCTYPE01, \
					  CLA_TXSRCTYPE01(cdepth0, adepth0, istrans0, hasssb0, hascolor0, \
									  hasalpha0, isliteral0, \
						cdepth1, adepth1, istrans1, hasssb1, hascolor1, \
									  hasalpha1, isliteral1))

#define CLA_TXSRCTYPE23(cdepth2, adepth2, istrans2, hasssb2, hascolor2, hasalpha2, isliteral2, \
						cdepth3, adepth3, istrans3, hasssb3, hascolor3, hasalpha3, isliteral3) \
					  (CLT_Bits(TXTSRCTYPE23, CDEPTH2, cdepth) |\
					   CLT_Bits(TXTSRCTYPE23, ADEPTH2, adepth) |\
					   CLT_Bits(TXTSRCTYPE23, ISTRANS2, istrans) |\
					   CLT_Bits(TXTSRCTYPE23, HASSSB2, hasssb) |\
					   CLT_Bits(TXTSRCTYPE23, HASCOLOR2, hascolor) |\
					   CLT_Bits(TXTSRCTYPE23, HASALPHA2, hasalpha) |\
					   CLT_Bits(TXTSRCTYPE23, ISLITERAL2, isliteral) |\
					   CLT_Bits(TXTSRCTYPE23, CDEPTH3, cdepth) |\
					   CLT_Bits(TXTSRCTYPE23, ADEPTH3, adepth) |\
					   CLT_Bits(TXTSRCTYPE23, ISTRANS3, istrans) |\
					   CLT_Bits(TXTSRCTYPE23, HASSSB3, hasssb) |\
					   CLT_Bits(TXTSRCTYPE23, HASCOLOR3, hascolor) |\
					   CLT_Bits(TXTSRCTYPE23, HASALPHA3, hasalpha) |\
					   CLT_Bits(TXTSRCTYPE23, ISLITERAL3, isliteral))

#define CLT_TXSRCTYPE23(pp, cdepth2, adepth2, istrans2, hasssb2, hascolor2, hasalpha2, isliteral2, \
						cdepth3, adepth3, istrans3, hasssb3, hascolor3, hasalpha3, isliteral3) \
	CLT_WriteRegister((*pp), TXTSRCTYPE23, \
					  CLA_TXSRCTYPE23(cdepth2, adepth2, istrans2, hasssb2, hascolor2, \
									  hasalpha2, isliteral2, \
						cdepth3, adepth3, istrans3, hasssb3, hascolor3, \
									  hasalpha3, isliteral3))

#define CLA_TXTEXPTYPE(cdepth, adepth, istrans, hasssb, hascolor, hasalpha, isliteral) \
					  (CLT_Bits(TXTEXPTYPE, CDEPTH, cdepth) |\
					   CLT_Bits(TXTEXPTYPE, ADEPTH, adepth) |\
					   CLT_Bits(TXTEXPTYPE, ISTRANS, istrans) |\
					   CLT_Bits(TXTEXPTYPE, HASSSB, hasssb) |\
					   CLT_Bits(TXTEXPTYPE, HASCOLOR, hascolor) |\
					   CLT_Bits(TXTEXPTYPE, HASALPHA, hasalpha) |\
					   CLT_Bits(TXTEXPTYPE, ISLITERAL, isliteral))

#define CLT_TXTEXPTYPE(pp, cdepth, adepth, istrans, hasssb, hascolor, hasalpha, isliteral) \
	CLT_WriteRegister((*pp), TXTEXPTYPE, \
					  CLA_TXTEXPTYPE(cdepth, adepth, istrans, hasssb, hascolor, hasalpha, isliteral))

#define CLA_TXTCONST0(red, green, blue, alpha, ssb) \
	(CLT_Bits(TXTCONST0, RED, red) | \
	 CLT_Bits(TXTCONST0, GREEN, green) | \
	 CLT_Bits(TXTCONST0, BLUE, blue) | \
	 CLT_Bits(TXTCONST0, ALPHA, alpha) | \
	 CLT_Bits(TXTCONST0, SSB, ssb))
#define CLT_TXTCONST0(pp, red, green, blue, alpha, ssb) \
	CLT_WriteRegister((*pp), TXTCONST0, CLA_TXTCONST0(red, green, blue, alpha, ssb))

#define CLA_TXTCONST1(red, green, blue, alpha, ssb) \
	(CLT_Bits(TXTCONST1, RED, red) | \
	 CLT_Bits(TXTCONST1, GREEN, green) | \
	 CLT_Bits(TXTCONST1, BLUE, blue) | \
	 CLT_Bits(TXTCONST1, ALPHA, alpha) | \
	 CLT_Bits(TXTCONST1, SSB, ssb))
#define CLT_TXTCONST1(pp, red, green, blue, alpha, ssb) \
	CLT_WriteRegister((*pp), TXTCONST1, CLA_TXTCONST1(red, green, blue, alpha, ssb))

#define CLA_TXTCONST2(red, green, blue, alpha, ssb) \
	(CLT_Bits(TXTCONST2, RED, red) | \
	 CLT_Bits(TXTCONST2, GREEN, green) | \
	 CLT_Bits(TXTCONST2, BLUE, blue) | \
	 CLT_Bits(TXTCONST2, ALPHA, alpha) | \
	 CLT_Bits(TXTCONST2, SSB, ssb))
#define CLT_TXTCONST2(pp, red, green, blue, alpha, ssb) \
	CLT_WriteRegister((*pp), TXTCONST2, CLA_TXTCONST2(red, green, blue, alpha, ssb))

#define CLA_TXTCONST3(red, green, blue, alpha, ssb) \
	(CLT_Bits(TXTCONST3, RED, red) | \
	 CLT_Bits(TXTCONST3, GREEN, green) | \
	 CLT_Bits(TXTCONST3, BLUE, blue) | \
	 CLT_Bits(TXTCONST3, ALPHA, alpha) | \
	 CLT_Bits(TXTCONST3, SSB, ssb))
#define CLT_TXTCONST3(pp, red, green, blue, alpha, ssb) \
	CLT_WriteRegister((*pp), TXTCONST3, CLA_TXTCONST3(red, green, blue, alpha, ssb))


#define CLA_DBUSERCONTROL(zbuffen, zouten, winclipinen, winclipouten, blenden, \
						  srcen, ditheren, destoutmask) \
	(CLT_Bits(DBUSERCONTROL, ZBUFFEN, zbuffen) | \
	 CLT_Bits(DBUSERCONTROL, ZOUTEN, zouten) | \
	 CLT_Bits(DBUSERCONTROL, WINCLIPINEN, winclipinen) | \
	 CLT_Bits(DBUSERCONTROL, WINCLIPOUTEN, winclipouten) | \
	 CLT_Bits(DBUSERCONTROL, BLENDEN, blenden) | \
	 CLT_Bits(DBUSERCONTROL, SRCEN, srcen) | \
	 CLT_Bits(DBUSERCONTROL, DITHEREN, ditheren) | \
	 CLT_Bits(DBUSERCONTROL, DESTOUTMASK, destoutmask))\

#define CLT_DBUSERCONTROL(pp, zbuffen, zouten, winclipinen, winclipouten, blenden, \
						  srcen, ditheren, destoutmask) \
	CLT_WriteRegister((*pp),  DBUSERCONTROL, \
					  CLA_DBUSERCONTROL(zbuffen, zouten, winclipinen, winclipouten, blenden, \
										srcen, ditheren, destoutmask))

#define CLA_DBDISCARDCONTROL(zclipped, ssb0, rgb0, alpha0) \
	(CLT_Bits(DBDISCARDCONTROL, ZCLIPPED, zclipped) | \
	 CLT_Bits(DBDISCARDCONTROL, SSB0, ssb0) | \
	 CLT_Bits(DBDISCARDCONTROL, RGB0, rgb0) | \
	 CLT_Bits(DBDISCARDCONTROL, ALPHA0, alpha0))
#define CLT_DBDISCARDCONTROL(pp, zclipped, ssb0, rgb0, alpha0) \
	CLT_WriteRegister((*pp),  DBDISCARDCONTROL, \
					   CLA_DBDISCARDCONTROL(zclipped, ssb0, rgb0, alpha0))

#define CLA_DBXWINCLIP(xwinclipmin, xwinclipmax) \
	(CLT_Bits(DBXWINCLIP, XWINCLIPMIN, xwinclipmin) | \
	 CLT_Bits(DBXWINCLIP, XWINCLIPMAX, xwinclipmax)) 
#define CLT_DBXWINCLIP(pp, xwinclipmin, xwinclipmax) \
	CLT_WriteRegister((*pp), DBXWINCLIP , CLA_DBXWINCLIP(xwinclipmin, xwinclipmax))

#define CLA_DBYWINCLIP(ywinclipmin, ywinclipmax) \
	(CLT_Bits(DBYWINCLIP, YWINCLIPMIN, ywinclipmin) | \
	 CLT_Bits(DBYWINCLIP, YWINCLIPMAX, ywinclipmax))
#define CLT_DBYWINCLIP(pp, ywinclipmin, ywinclipmax) \
	CLT_WriteRegister((*pp), DBYWINCLIP , CLA_DBYWINCLIP(ywinclipmin, ywinclipmax))

#define CLT_DBXYWINCLIP(pp, xwinclipmin, xwinclipmax, ywinclipmin, ywinclipmax) \
	CLT_Write2Registers((*pp), DBXWINCLIP, \
						CLA_DBXWINCLIP(xwinclipmin, xwinclipmax), \
						CLA_DBYWINCLIP(ywinclipmin, ywinclipmax))

#define CLT_DBSRCBASEADDR(pp, x) CLT_WriteRegister((*pp), DBSRCBASEADDR, x)

#define CLA_DBSRCXSTRIDE(xstride) CLT_Bits(DBSRCXSTRIDE, XSTRIDE, xstride)
#define CLT_DBSRCXSTRIDE(pp, xstride) \
	CLT_WriteRegister((*pp), DBSRCXSTRIDE, CLA_DBSRCXSTRIDE(xstride))

#define CLA_DBSRCOFFSET(xoffset, yoffset) \
	(CLT_Bits(DBSRCOFFSET, XOFFSET, xoffset)  |\
	 CLT_Bits(DBSRCOFFSET, YOFFSET, yoffset))
#define CLT_DBSRCOFFSET(pp, xoffset, yoffset) \
	CLT_WriteRegister((*pp), DBSRCOFFSET, CLA_DBSRCOFFSET(xoffset, yoffset))

#define CLA_DBSRCCNTL(srcmsbrep, src32bpp) \
	(CLT_Bits(DBSRCCNTL, SRCMSBREP, srcmsbrep) | \
	 CLT_Bits(DBSRCCNTL, SRC32BPP, src32bpp))
#define CLT_DBSRCCNTL(pp, srcmsbrep, src32bpp) \
	CLT_WriteRegister((*pp), DBSRCCNTL, CLA_DBSRCCNTL(srcmsbrep, src32bpp))

#define CLA_DBZCNTL(zupdateongreaterz,pixoutongreaterz, \
					zupdateonequalz, pixoutonequalz, \
					zupdateonsmallerz, pixoutonsmallerz) \
	(CLT_Bits(DBZCNTL, ZUPDATEONGREATERZ, zupdateongreaterz) | \
	 CLT_Bits(DBZCNTL, PIXOUTONGREATERZ, pixoutongreaterz) | \
	 CLT_Bits(DBZCNTL, ZUPDATEONEQUALZ, zupdateonequalz) | \
	 CLT_Bits(DBZCNTL, PIXOUTONEQUALZ, pixoutonequalz) | \
	 CLT_Bits(DBZCNTL, ZUPDATEONSMALLERZ, zupdateonsmallerz) | \
	 CLT_Bits(DBZCNTL, PIXOUTONSMALLERZ, pixoutonsmallerz))

#define CLT_DBZCNTL(pp, zupdateongreaterz,pixoutongreaterz, \
					zupdateonequalz, pixoutonequalz, \
					zupdateonsmallerz, pixoutonsmallerz) \
	CLT_WriteRegister((*pp), DBZCNTL, \
					  CLA_DBZCNTL(zupdateongreaterz,pixoutongreaterz, \
								  zupdateonequalz, pixoutonequalz, \
								  zupdateonsmallerz, pixoutonsmallerz))

#define CLA_DBZOFFSET(zxoffset, zyoffset) \
	(CLT_Bits(DBZOFFSET, ZXOFFSET, zxoffset) | \
	 CLT_Bits(DBZOFFSET, ZYOFFSET, zyoffset))
#define CLT_DBZOFFSET(pp, zxoffset, zyoffset) \
	CLT_WriteRegister((*pp), DBZOFFSET, CLA_DBZOFFSET(zxoffset, zyoffset))


#define CLA_DBSSBDSBCNTL(dsbconst, dsbselect) \
	(CLT_Bits(DBSSBDSBCNTL, DSBCONST, dsbconst) | \
	 CLT_Bits(DBSSBDSBCNTL, DSBSELECT, dsbselect))
#define CLT_DBSSBDSBCNTL(pp, dsbconst, dsbselect) \
	CLT_WriteRegister((*pp), DBSSBDSBCNTL, CLA_DBSSBDSBCNTL(dsbconst, dsbselect))

#define CLA_DBCONSTIN(red, green, blue) \
	(CLT_Bits(DBCONSTIN, RED, red) | \
	 CLT_Bits(DBCONSTIN, GREEN, green) |\
	 CLT_Bits(DBCONSTIN, BLUE, blue))
#define CLT_DBCONSTIN(pp, red, green, blue) \
	CLT_WriteRegister((*pp), DBCONSTIN, CLA_DBCONSTIN(red, green, blue))

#define CLA_DBAMULTCNTL(ainputselect, amultcoefselect, amultconstcontrol, amultrjustify) \
					  (CLT_Bits(DBAMULTCNTL, AINPUTSELECT, ainputselect) | \
					   CLT_Bits(DBAMULTCNTL, AMULTCOEFSELECT, amultcoefselect) | \
					   CLT_Bits(DBAMULTCNTL, AMULTCONSTCONTROL, amultconstcontrol) | \
					   CLT_Bits(DBAMULTCNTL, AMULTRJUSTIFY, amultrjustify))
#define CLT_DBAMULTCNTL(pp, ainputselect, amultcoefselect, amultconstcontrol, amultrjustify) \
	CLT_WriteRegister((*pp), DBAMULTCNTL, \
					  CLA_DBAMULTCNTL(ainputselect, amultcoefselect, amultconstcontrol,amultrjustify))

#define CLA_DBAMULTCONSTSSB0(red, green, blue) \
					  (CLT_Bits(DBAMULTCONSTSSB0, RED, red) | \
					   CLT_Bits(DBAMULTCONSTSSB0, GREEN, green) | \
					   CLT_Bits(DBAMULTCONSTSSB0, BLUE, blue))
#define CLT_DBAMULTCONSTSSB0(pp, red, green, blue) \
	CLT_WriteRegister((*pp), DBAMULTCONSTSSB0, \
					  CLA_DBAMULTCONSTSSB0(red, green, blue))

#define CLA_DBAMULTCONSTSSB1(red, green, blue) \
					  (CLT_Bits(DBAMULTCONSTSSB1, RED, red) | \
					   CLT_Bits(DBAMULTCONSTSSB1, GREEN, green) | \
					   CLT_Bits(DBAMULTCONSTSSB1, BLUE, blue))
#define CLT_DBAMULTCONSTSSB1(pp, red, green, blue) \
	CLT_WriteRegister((*pp), DBAMULTCONSTSSB1, \
					  CLA_DBAMULTCONSTSSB1(red, green, blue))

#define CLT_DBAMULTCONST(pp, c0, c1) \
	CLT_Write2Registers((*pp), DBAMULTCONSTSSB0, c0, c1)

#define CLA_DBBMULTCNTL(binputselect, bmultcoefselect, bmultconstcontrol, bmultrjustify) \
					  (CLT_Bits(DBBMULTCNTL, BINPUTSELECT, binputselect) | \
					   CLT_Bits(DBBMULTCNTL, BMULTCOEFSELECT, bmultcoefselect) | \
					   CLT_Bits(DBBMULTCNTL, BMULTCONSTCONTROL, bmultconstcontrol) | \
					   CLT_Bits(DBBMULTCNTL, BMULTRJUSTIFY, bmultrjustify))
#define CLT_DBBMULTCNTL(pp, binputselect, bmultcoefselect, bmultconstcontrol, bmultrjustify) \
	CLT_WriteRegister((*pp), DBBMULTCNTL, \
					  CLA_DBBMULTCNTL(binputselect, bmultcoefselect, bmultconstcontrol, bmultrjustify))

#define CLA_DBBMULTCONSTSSB0(red, green, blue) \
					  (CLT_Bits(DBBMULTCONSTSSB0, RED, red) | \
					   CLT_Bits(DBBMULTCONSTSSB0, GREEN, green) | \
					   CLT_Bits(DBBMULTCONSTSSB0, BLUE, blue))
#define CLT_DBBMULTCONSTSSB0(pp, red, green, blue) \
	CLT_WriteRegister((*pp), DBBMULTCONSTSSB0, \
					  CLA_DBBMULTCONSTSSB0(red, green, blue))

#define CLA_DBBMULTCONSTSSB1(red, green, blue) \
					  (CLT_Bits(DBBMULTCONSTSSB1, RED, red) | \
					   CLT_Bits(DBBMULTCONSTSSB1, GREEN, green) | \
					   CLT_Bits(DBBMULTCONSTSSB1, BLUE, blue))
#define CLT_DBBMULTCONSTSSB1(pp, red, green, blue) \
	CLT_WriteRegister((*pp), DBBMULTCONSTSSB1, \
					  CLA_DBBMULTCONSTSSB1(red, green, blue))
#define CLT_DBBMULTCONST(pp, c0, c1) \
	CLT_Write2Registers((*pp), DBBMULTCONSTSSB0, c0, c1)

#define CLA_DBALUCNTL(aluoperation, finaldivide)\
					  (CLT_Bits(DBALUCNTL, ALUOPERATION, aluoperation) | \
					   CLT_Bits(DBALUCNTL, FINALDIVIDE, finaldivide))

#define CLT_DBALUCNTL(pp, aluoperation, finaldivide)\
	CLT_WriteRegister((*pp), DBALUCNTL, CLA_DBALUCNTL(aluoperation, finaldivide))

#define CLA_DBSRCALPHACNTL(aclamp)	  (CLT_Bits(DBSRCALPHACNTL, ACLAMP, aclamp))

#define CLT_DBSRCALPHACNTL(pp, aclamp)		\
	CLT_WriteRegister((*pp),DBSRCALPHACNTL, CLA_DBSRCALPHACNTL(aclamp))

#define CLA_DBDESTALPHACNTL(destconstselect)	\
					  CLT_Bits(DBDESTALPHACNTL, DESTCONSTSELECT, destconstselect)
					   
  
#define CLT_DBDESTALPHACNTL(pp, destconstselect)	\
	CLT_WriteRegister((*pp), DBDESTALPHACNTL, CLA_DBDESTALPHACNTL(destconstselect))
  
#define CLA_DBDESTALPHACONST(destalphaconstssb0, destalphaconstssb1) \
					  (CLT_Bits(DBDESTALPHACONST, DESTALPHACONSTSSB0, destalphaconstssb0) | \
					   CLT_Bits(DBDESTALPHACONST, DESTALPHACONSTSSB1, destalphaconstssb1))

#define CLT_DBDESTALPHACONST(pp, destalphaconstssb0, destalphaconstssb1) \
	CLT_WriteRegister((*pp), DBDESTALPHACONST, \
					  CLA_DBDESTALPHACONST(destalphaconstssb0, destalphaconstssb1))

#define CLT_DbDitherMatrix(pp, dmA, dmB)	CLT_WriteRegister2((*pp), 0x8080, dbA, dmB)

/* Vertex Instructions */
#define	FV_TRIANGLE_SHADING_MASK		PPCBIT(15)
#define	FV_TRIANGLE_SHADING_SHIFT   	PPCSHIFT(15)
#define	FV_TRIANGLE_TEXTURE_MASK		PPCBIT(14)
#define	FV_TRIANGLE_TEXTURE_SHIFT		PPCSHIFT(14)
#define	FV_TRIANGLE_PERSPECTIVE_MASK	PPCBIT(13)
#define	FV_TRIANGLE_PERSPECTIVE_SHIFT	PPCSHIFT(13)
#define	FV_TRIANGLE_NEW_MASK			PPCBIT(12)
#define	FV_TRIANGLE_NEW_SHIFT			PPCSHIFT(12)
#define	FV_TRIANGLE_STRIPFAN_MASK		PPCBIT(11)
#define	FV_TRIANGLE_STRIPFAN_SHIFT		PPCSHIFT(11)
#	define RC_STRIP			0x0
#	define RC_FAN			0x1

#define	FV_TRIANGLE_COUNT_MASK		PPCMASK(0x0000FFFF, 31)
#define	FV_TRIANGLE_COUNT_SHIFT		PPCSHIFT(31)


#define CLA_TRIANGLE(new, stripfan, perspective, texture, shading, count) \
	(RC_WRITE_VERTEX | \
	 CLT_Bits(TRIANGLE, NEW, new) | \
	 CLT_Bits(TRIANGLE, STRIPFAN, stripfan) | \
	 CLT_Bits(TRIANGLE, PERSPECTIVE, perspective) | \
	 CLT_Bits(TRIANGLE, TEXTURE, texture) | \
	 CLT_Bits(TRIANGLE, SHADING, shading) | \
	 CLT_Bits(TRIANGLE, COUNT, count-1))
#define CLT_TRIANGLE(pp, new, stripfan, perspective, texture, shading, count) \
	*(*pp)++ = (uint32) CLA_TRIANGLE(new, stripfan, perspective, texture, shading, count);

#define CLT_Vertex(pp, x, y) \
  *(float*)(*pp)++ = (float)x; \
  *(float*)(*pp)++ = (float)y;
#define CLT_VertexW(pp, x, y, w) \
  *(float*)(*pp)++ = (float)x; \
  *(float*)(*pp)++ = (float)y; \
  *(float*)(*pp)++ = (float)w;
#define CLT_VertexRgba(pp, x, y, r, g, b, a) \
  *(float*)(*pp)++ = (float)x;	\
  *(float*)(*pp)++ = (float)y;	\
  *(float*)(*pp)++ = (float)r;	\
  *(float*)(*pp)++ = (float)g;	\
  *(float*)(*pp)++ = (float)b;	\
  *(float*)(*pp)++ = (float)a; 
#define CLT_VertexRgbaW(pp, x, y, r, g, b, a, w) \
  *(float*)(*pp)++ = (float)x;	\
  *(float*)(*pp)++ = (float)y;	\
  *(float*)(*pp)++ = (float)r;	\
  *(float*)(*pp)++ = (float)g;	\
  *(float*)(*pp)++ = (float)b;	\
  *(float*)(*pp)++ = (float)a;	\
  *(float*)(*pp)++ = (float)w; 
#define CLT_VertexUvW(pp, x, y, u, v, w) \
  *(float*)(*pp)++ = (float)x;	\
  *(float*)(*pp)++ = (float)y;	\
  *(float*)(*pp)++ = (float)w;	\
  *(float*)(*pp)++ = (float)u;	\
  *(float*)(*pp)++ = (float)v;	
#define CLT_VertexRgbaUvW(pp, x, y, r, g, b, a, u, v, w) \
  *(float*)(*pp)++ = (float)x;	\
  *(float*)(*pp)++ = (float)y;	\
  *(float*)(*pp)++ = (float)r;	\
  *(float*)(*pp)++ = (float)g;	\
  *(float*)(*pp)++ = (float)b;	\
  *(float*)(*pp)++ = (float)a;	\
  *(float*)(*pp)++ = (float)w;  \
  *(float*)(*pp)++ = (float)u;	\
  *(float*)(*pp)++ = (float)v;	

#endif	   	/* CLTMACROS_H */
