##############################################################################

## This file is a shell script fragment that supplies the information
## necessary to tailor a template configure script into the configure
## script appropriate for this directory.  For more information, check
## any existing configure script.  

## Be warned, there are two types of configure.in files.  There are those
## used by Autoconf, which are macros which are expanded into a configure
## script by autoconf.  The other sort, of which this is one, is executed
## by Cygnus configure.  

## For more information on these two systems, check out the documentation
## for 'Autoconf' (autoconf.texi) and 'Configure' (configure.texi).  

##############################################################################

### To add a new directory to the tree, first choose whether it is a target
### or a host dependent tool.  Then put it into the appropriate list
### (library or tools, host or target), doing a dependency sort.  For
### example, gdb requires that byacc (or bison) be built first, so it is in
### the ${host_tools} list after byacc and bison.  


# these libraries are used by various programs built for the host environment
#
host_libs="mmalloc libiberty opcodes bfd readline gash tcl tk tclX"

if [ "${enable_gdbgui}" = "yes" ] ; then
	host_libs="${host_libs} libgui"
fi

# these tools are built for the host environment
#
host_tools="byacc flex bison binutils ld gas gcc gdb make patch
	    prms send-pr gprof gdbtest tgas etc expect dejagnu sim
            m4 autoconf ispell grep diff rcs cvs fileutils shellutils
	    textutils wdiff find emacs emacs19 uudecode hello tar gzip indent
	    recode release sed utils"


# these libraries are built for the target environment, and are built after
# the host libraries and the host tools (which may be a cross compiler)
#
target_libs="target-libiberty target-libgloss target-newlib target-libio target-librx target-libstdc++ target-libg++ target-winsup"


# these tools are built using the target libs, and are intended to run only
# in the target environment
#
# note: any program that *uses* libraries that are in the "target_libs"
# list belongs in this list.  those programs are also very likely
# candidates for the "native_only" list which follows
#
target_tools="target-examples target-groff"

################################################################################

## These two lists are of directories that are to be removed from the
## ${configdirs} list for either cross-compilations or for native-
## compilations.  For example, it doesn't make that much sense to
## cross-compile Emacs, nor is it terribly useful to compile target-libiberty in
## a native environment.  

# directories to be built in the native environment only
#
native_only="autoconf cvs emacs emacs19 fileutils find grep gzip hello
	     indent ispell m4 rcs recode sed shellutils tar textutils gash
	     uudecode wdiff gprof target-groff"

# directories to be built in a cross environment only
#
cross_only="target-libiberty target-libgloss target-newlib"

## All tools belong in one of the four categories, and are assigned above
## We assign ${configdirs} this way to remove all embedded newlines.  This
## is important because configure will choke if they ever get through.
## ${configdirs} is directories we build using the host tools.
## ${target_configdirs} is directories we build using the target tools.
#
configdirs=`echo ${host_libs} ${host_tools}`
target_configdirs=`echo ${target_libs} ${target_tools}`

################################################################################

srctrigger=move-if-change
srcname="gnu development package"

# This gets set non-empty for some net releases of packages.
appdirs=""

# per-host:

# Work in distributions that contain no compiler tools, like Autoconf.
if [ -d ${srcdir}/config ]; then
case "${host}" in
  m68k-hp-hpux*)	  host_makefile_frag=config/mh-hp300 ;;
  m68k-apollo-sysv*)      host_makefile_frag=config/mh-apollo68 ;;
  m68k-apollo-bsd*)       host_makefile_frag=config/mh-a68bsd ;;
  m88k-dg-dgux*)	  host_makefile_frag=config/mh-dgux ;;
  m88k-harris-cxux*)	  host_makefile_frag=config/mh-cxux ;;
  m88k-motorola-sysv*)    host_makefile_frag=config/mh-delta88;;
  mips*-dec-ultrix*)      host_makefile_frag=config/mh-decstation ;;
  mips*-sgi-irix[56]*)    host_makefile_frag=config/mh-irix5 ;;
  mips*-sgi-irix4*)       host_makefile_frag=config/mh-irix4 ;;
  mips*-sgi-irix3*)       host_makefile_frag=config/mh-sysv ;;
  mips*-*-sysv4*)	  host_makefile_frag=config/mh-sysv4 ;;
  mips*-*-sysv*)	  host_makefile_frag=config/mh-riscos ;;
  i[345]86-ncr-sysv4.3)   host_makefile_frag=config/mh-ncrsvr43 ;;
  i[345]86-ncr-sysv4*)    host_makefile_frag=config/mh-ncr3000 ;;
  i[345]86-*-sco*)        host_makefile_frag=config/mh-sco ;;
  i[345]86-*-isc*)	  host_makefile_frag=config/mh-sysv ;;
  i[345]86-*-linux*)      host_makefile_frag=config/mh-linux ;;
  i[345]86-*-solaris2*)   host_makefile_frag=config/mh-sysv4 ;;
  i[345]86-*-aix*)	  host_makefile_frag=config/mh-aix386 ;;
  i[345]86-*-go32*)	  host_makefile_frag=config/mh-go32 ;;
  i[345]86-*-win32)	  host_makefile_frag=config/mh-i386win32 ;;
  vax-*-ultrix2*)         host_makefile_frag=config/mh-vaxult2 ;;
  *-*-solaris2*)          host_makefile_frag=config/mh-solaris ;;
  m68k-sun-sunos*)	  host_makefile_frag=config/mh-sun3 ;;
  *-hp-hpux[78]*)         host_makefile_frag=config/mh-hpux8 ;;
  *-hp-hpux*)             host_makefile_frag=config/mh-hpux ;;
  *-*-hiux*)              host_makefile_frag=config/mh-hpux ;;
  rs6000-*-lynxos*)	  host_makefile_frag=config/mh-lynxrs6k ;;
  *-*-lynxos*)	  	  host_makefile_frag=config/mh-lynxos ;;
  *-*-sysv4*)             host_makefile_frag=config/mh-sysv4 ;;
  *-*-sysv*)              host_makefile_frag=config/mh-sysv ;;
esac
fi

# See if we can extract a definition of CC from the fragment.
if [ -z "${CC}" ]; then
  if [ -n "${host_makefile_frag}" -a -f "${srcdir}/${host_makefile_frag}" ]; then
    xx=`sed -n -e 's/^[ 	]*CC[ 	]*=[ 	]*\(.*\)$/\1/p' < ${srcdir}/${host_makefile_frag}`
    if [ -n "${xx}" ] ; then
      CC=$xx
    fi
  fi
fi

# The Solaris /usr/ucb/cc compiler does not appear to work.
case "${host}" in
  sparc-sun-solaris2*)
      if [ "`/usr/bin/which ${CC-cc}`" = "/usr/ucb/cc" ] ; then
          could_use=
          [ -d /opt/SUNWspro/bin ] && could_use="/opt/SUNWspro/bin"
          if [ -d /opt/cygnus/bin ] ; then
              if [ "$could_use" = "" ] ; then
                  could_use="/opt/cygnus/bin"
              else
                  could_use="$could_use or /opt/cygnus/bin"
              fi
          fi
        if [ "$could_use" = "" ] ; then
            echo "Warning: compilation may fail because you're using"
            echo "/usr/ucb/cc.  You should change your PATH or CC "
            echo "variable and rerun configure."
        else
            echo "Warning: compilation may fail because you're using"
            echo "/usr/ucb/cc, when you should use the C compiler from"
            echo "$could_use.  You should change your"
            echo "PATH or CC variable and rerun configure."
        fi
      fi
  ;;
esac

# We default to --with-shared on platforms where -fpic is meaningless.
# Well, we don't yet, but we will.
if false && [ "${host}" = "${target}" ] && [ x${enable_shared} = x ]; then
  case "${target}" in
    alpha-dec-osf*)	enable_shared=yes ;;
    mips-sgi-irix5*)	enable_shared=yes ;;
    *)			enable_shared=no ;;
  esac
fi

if [ x${enable_shared} = xyes ]; then
  waugh=
  case "${host}" in
    hppa*)		waugh=config/mh-papic ;;
    i[345]86-*)		waugh=config/mh-x86pic ;;
    *)			waugh=config/mh-${host_cpu}pic ;;
  esac
  if [ -f ${srcdir}/${waugh} ]; then
    if [ -n "${host_makefile_frag}" ] ; then
      cat ${srcdir}/${host_makefile_frag} > mh-frag
      cat ${srcdir}/${waugh} >> mh-frag
      host_makefile_frag=mh-frag
    else
      host_makefile_frag=${waugh}
    fi
  fi
fi

# per-target:

case "${target}" in
  v810*)		target_makefile_frag=config/mt-v810 ;;
  i[345]86-*-netware*)  target_makefile_frag=config/mt-netware ;;
  powerpc-*-netware*)   target_makefile_frag=config/mt-netware ;;
esac

skipdirs=
gasdir=gas
use_gnu_ld=
use_gnu_as=

# some tools are so dependent upon X11 that if we're not building with X, 
# it's not even worth trying to configure, much less build, that tool.

case ${with_x} in
  yes | "")  # the default value for this tree is that X11 is available
	;;
  no)
	skipdirs="${skipdirs} tk gash"
	;;
  *)
    	echo "*** bad value \"${with_x}\" for -with-x flag; ignored" 1>&2
    	;;
esac

# Some tools are only suitable for building in a "native" situation.
# Those are added when we have a host==target configuration.  For cross
# toolchains, we add some directories that should only be useful in a
# cross-compiler.

is_cross_compiler=

if [ x"${host}" = x"${target}" ] ; then
	# when doing a native toolchain, don't build the targets
	# that are in the 'cross only' list
	skipdirs="${skipdirs} ${cross_only}"
	is_cross_compiler=no
	target_subdir=.
else
	# similarly, don't build the targets in the 'native only' 
	# list when building a cross compiler
	skipdirs="${skipdirs} ${native_only}"
	is_cross_compiler=yes
	target_subdir=${target_alias}
	if [ ! -d ${target_subdir} ] ; then
	    if mkdir ${target_subdir} ; then true
	    else
		echo "'*** could not make ${PWD=`pwd`}/${target_subdir}" 1>&2
                exit 1
	    fi
	fi
fi	

copy_dirs=

# Handle --with-headers=XXX.  The contents of the named directory are
# copied to $(tooldir)/sys-include.
if [ x"${with_headers}" != x ]; then
  if [ x${is_cross_compiler} = xno ]; then
    echo 1>&2 '***' --with-headers is only supported when cross compiling
    exit 1
  fi
  case "${exec_prefixoption}" in
  "") x=${prefix} ;;
  *) x=${exec_prefix} ;;
  esac
  copy_dirs="${copy_dirs} ${with_headers} $x/${target_alias}/sys-include"
fi

# Handle --with-libs=XXX.  Multiple directories are permitted.  The
# contents are copied to $(tooldir)/lib.
if [ x"${with_libs}" != x ]; then
  if [ x${is_cross_compiler} = xno ]; then
    echo 1>&2 '***' --with-libs is only supported when cross compiling
    exit 1
  fi
  # Copy the libraries in reverse order, so that files in the first named
  # library override files in subsequent libraries.
  case "${exec_prefixoption}" in
  "") x=${prefix} ;;
  *) x=${exec_prefix} ;;
  esac
  for l in ${with_libs}; do
    copy_dirs="$l $x/${target_alias}/lib ${copy_dirs}"
  done
fi

# If both --with-headers and --with-libs are specified, default to
# --without-newlib.
if [ x"${with_headers}" != x ] && [ x"${with_libs}" != x ]; then
  if [ x"${with_newlib}" = x ]; then
    with_newlib=no
  fi
fi

# Recognize --with-newlib/--without-newlib.
if [ x${with_newlib} = xno ]; then
  skipdirs="${skipdirs} target-newlib"
elif [ x${with_newlib} = xyes ]; then
  skipdirs=`echo " ${skipdirs} " | sed -e 's/ target-newlib / /'`
fi

# Handle ${copy_dirs}
set fnord ${copy_dirs}
shift
while [ $# != 0 ]; do
  if [ -f $2/COPIED ] && [ x"`cat $2/COPIED`" = x"$1" ]; then
    :
  else
    echo Copying $1 to $2

    # Use the install script to create the directory and all required
    # parent directories.
    if [ -d $2 ]; then
      :
    else
      echo >config.temp
      ${srcdir}/install.sh -c -m 644 config.temp $2/COPIED
    fi

    # Copy the directory, assuming we have tar.
    # FIXME: Should we use B in the second tar?  Not all systems support it.
    (cd $1; tar -cf - .) | (cd $2; tar -xpf -)

    # It is the responsibility of the user to correctly adjust all
    # symlinks.  If somebody can figure out how to handle them correctly
    # here, feel free to add the code.

    echo $1 > $2/COPIED
  fi
  shift; shift
done

# Configure extra directories which are host specific

case "${host}" in
  i[345]86-*-win32* | i[345]86-*-go32*)
	  configdirs="$configdirs dosrel" ;;
esac

# Remove more programs from consideration, based on the host or 
# target this usually means that a port of the program doesn't
# exist yet.

noconfigdirs=""

case "${host}" in
  i[345]86-*-vsta)
    noconfigdirs="tcl expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff"
    ;;
  i[345]86-*-go32)
    noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff"
	;;
  i[345]86-*-win32)
     noconfigdirs="patch diff flex make tk tcl expect dejagnu cvs autoconf texinfo bison send-pr gprof rcs"
    ;;
esac


case "${target}" in
  *-*-netware)
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-librx target-newlib target-libiberty"
    ;;
  *-*-vxworks5.1)
    noconfigdirs="$noconfigdirs target-newlib"
    ;;
  alpha-dec-osf*)
    # ld works, but does not support shared libraries.  emacs doesn't
    # work.  newlib is not 64 bit ready.  I'm not sure about fileutils or grep.
    noconfigdirs="$noconfigdirs ld emacs fileutils grep target-newlib"
    ;;
  alpha*-*-*)
    # newlib is not 64 bit ready
    noconfigdirs="$noconfigdirs target-newlib"
    ;;
  arm-*-riscix*)
    noconfigdirs="$noconfigdirs ld"
    ;;
  h8300*-*-* | \
  h8500-*-*)
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-libio target-librx"
    ;;
  hppa*-*-*elf* | \
  hppa*-*-lites*)
    # Do configure ld/binutils/gas for this case.
    ;;
  hppa*-*-*)
    # HP's C compiler doesn't handle Emacs correctly (but on BSD and Mach
    # cc is gcc, and on any system a user should be able to link cc to
    # whatever they want.  FIXME, emacs emacs19).
    case "${CC}" in
	"" | cc*) noconfigdirs="$noconfigdirs emacs emacs19" ;;
        *) ;;
    esac
    noconfigdirs="$noconfigdirs ld shellutils"
    ;;
  i[345]86-*-go32)
    # but don't build gdb
    noconfigdirs="$noconfigdirs gdb target-libg++ target-libstdc++ target-libio target-librx"
    ;;

  i[345]86-*-win32)
    # Can't build gdb for win32 if not native.
    # make/glob's configure uses some AC_TRY_RUN type tests
    if [ x${is_cross_compiler} = xyes ]; then
	    noconfigdirs="$noconfigdirs gdb tk make"
    fi
    # always build newlib.
    skipdirs=`echo " ${skipdirs} " | sed -e 's/ target-newlib / /'`
    ;;    
  i[345]86-*-pe)
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-libio target-librx"
    ;;
  i[345]86-*-sco*)
    noconfigdirs="$noconfigdirs gprof"
    ;;
  i[345]86-*-solaris2*)
    # The linker does static linking correctly, but the Solaris C library
    # has bugs such that some important functions won't work when statically
    # linked.  (See man pages for getpwuid, for example.)
    noconfigdirs="$noconfigdirs ld"
    ;;
  i[345]86-*-sysv4*)
    # The SYSV4 C compiler doesn't handle Emacs correctly
    case "${CC}" in
	"" | cc*) noconfigdirs="$noconfigdirs emacs emacs19" ;;
        *) ;;
    esac
    # but that's okay since emacs doesn't work anyway
    noconfigdirs="$noconfigdirs emacs emacs19"
    ;;
  powerpc-*-aix*)
    # copied from rs6000-*-* entry
    noconfigdirs="$noconfigdirs gprof cvs"
    ;;
  powerpc*-*-winnt* | powerpc*-*-pe*)
    noconfigdirs="$noconfigdirs gdb"
    ;;
  rs6000-*-lynxos*)
    # The CVS server code doesn't work on the RS/6000
    # Newlib makes problems for libg++ in crosses.
    noconfigdirs="$noconfigdirs target-newlib gprof cvs"
    ;;
  rs6000-*-*)
    noconfigdirs="$noconfigdirs gprof"
    ;;
  m68k-*-netbsd*)
    noconfigdirs="$noconfigdirs gdb"
    ;;
  m68k-apollo-*)
    noconfigdirs="$noconfigdirs ld binutils gprof"
    ;;
  mips*-*-irix5*)
    # The GNU linker does not support shared libraries.
    # emacs is emacs 18, which does not work on Irix 5 (emacs19 does work)
    noconfigdirs="$noconfigdirs ld gprof emacs"
    ;;
  mips*-dec-bsd*)
    noconfigdirs="$noconfigdirs gprof"
    ;;
  mips*-*-bsd*)
    noconfigdirs="$noconfigdirs gprof"
    ;;
  mips*-*-*)
    noconfigdirs="$noconfigdirs gprof"
    ;;
  romp-*-*)
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes"
    ;;
  sh-*-*)
    case "${host}" in
      i[345]86-*-vsta) ;; # don't add gprof back in
      i[345]86-*-go32) ;; # don't add gprof back in
      *) skipdirs=`echo " ${skipdirs} " | sed -e 's/ gprof / /'` ;;
    esac
    ;;
  sparc-*-sunos4*)
    if [ x${is_cross_compiler} != xno ] ; then
           noconfigdirs="$noconfigdirs gdb gdbtest target-newlib"
    else
           use_gnu_ld=no
    fi
    ;;
  v810-*-*)
    noconfigdirs="$noconfigdirs bfd binutils gas gcc gdb ld target-libg++ target-libstdc++ opcodes"
    ;;
  vax-*-vms)
    noconfigdirs="$noconfigdirs bfd binutils gdb ld target-newlib opcodes"
    ;;
  vax-*-*)
    noconfigdirs="$noconfigdirs target-newlib"
    ;;
  *-*-lynxos*)
    # Newlib makes problems for libg++ in crosses.
    noconfigdirs="$noconfigdirs target-newlib"
    ;; 
  *-*-macos* | \
  *-*-mpw*)
    # Macs want a resource compiler.
    configdirs="$configdirs grez"
    ;;    
esac

# If we are building a Canadian Cross, discard tools that can not be built
# using a cross compiler.  FIXME: These tools should be fixed.
if [ "${build}" != "${host}" ]; then
  noconfigdirs="$noconfigdirs expect dejagnu make texinfo diff"
fi

# Remove the entries in $skipdirs and $noconfigdirs from $configdirs and
# $target_configdirs.
# If we have the source for $noconfigdirs entries, add them to $notsupp.

notsupp=""
for dir in . $skipdirs $noconfigdirs ; do
  dirname=`echo $dir | sed -e s/target-//g`
  if [ $dir != . ]  && echo " ${configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
    configdirs=`echo " ${configdirs} " | sed -e "s/ ${dir} / /"`
    if [ -r $srcdir/$dirname/configure ] \
	|| [ -r $srcdir/$dirname/configure.in ]; then
      if echo " ${skipdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	true
      else
	notsupp="$notsupp $dir"
      fi
    fi
  fi
  if [ $dir != . ]  && echo " ${target_configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
    target_configdirs=`echo " ${target_configdirs} " | sed -e "s/ ${dir} / /"`
    if [ -r $srcdir/$dirname/configure ] \
	|| [ -r $srcdir/$dirname/configure.in ]; then
      if echo " ${skipdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	true
      else
	notsupp="$notsupp $dir"
      fi
    fi
  fi
done

# Sometimes the tools are distributed with libiberty but with no other
# libraries.  In that case, we don't want to build target-libiberty.
if [ -n "${target_configdirs}" ]; then
  others=
  for i in `echo ${target_configdirs} | sed -e s/target-//g` ; do
    if [ "$i" != "libiberty" ]; then
      if [ -r $srcdir/$i/configure ] || [ -r $srcdir/$i/configure.in ]; then
	others=yes;
	break;
      fi
    fi
  done
  if [ -z "${others}" ]; then
    target_configdirs=
  fi
fi

# Deconfigure all subdirectories, in case we are changing the
# configuration from one where a subdirectory is supported to one where it
# is not.
if [ -z "${norecursion}" -a -n "${configdirs}" ]; then
  for i in `echo ${configdirs} | sed -e s/target-//g` ; do
    rm -f $i/Makefile
  done
fi
if [ -z "${norecursion}" -a -n "${target_configdirs}" ]; then
  for i in `echo ${target_configdirs} | sed -e s/target-//` ; do
    rm -f ${target_subdir}/$i/Makefile
  done
fi

# Produce a warning message for the subdirs we can't configure.
# This isn't especially interesting in the Cygnus tree, but in the individual
# FSF releases, it's important to let people know when their machine isn't
# supported by the one or two programs in a package.

if [ -n "${notsupp}" ] && [ -z "${norecursion}" ]; then
  # If $appdirs is non-empty, at least one of those directories must still
  # be configured, or we error out.  (E.g., if the gas release supports a
  # specified target in some subdirs but not the gas subdir, we shouldn't
  # pretend that all is well.)
  if [ -n "$appdirs" ]; then
    for dir in $appdirs ; do
      if [ -r $dir/Makefile.in ]; then
	if echo " ${configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	  appdirs=""
	  break
	fi
	if echo " ${target_configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	  appdirs=""
	  break
	fi
      fi
    done
    if [ -n "$appdirs" ]; then
      echo "*** This configuration is not supported by this package." 1>&2
      exit 1
    fi
  fi
  # Okay, some application will build, or we don't care to check.  Still
  # notify of subdirs not getting built.
  echo "*** This configuration is not supported in the following subdirectories:" 1>&2
  echo "    ${notsupp}" 1>&2
  echo "    (Any other directories should still work fine.)" 1>&2
fi

# Set with_gnu_as and with_gnu_ld as appropriate.
#
# This is done by determining whether or not the appropriate directory
# is available, and by checking whether or not specific configurations
# have requested that this magic not happen.
# 
# The command line options always override the explicit settings in 
# configure.in, and the settings in configure.in override this magic.
#
# If the default for a toolchain is to use GNU as and ld, and you don't 
# want to do that, then you should use the --without-gnu-as and
# --without-gnu-ld options for the configure script.

if [ x${use_gnu_as} = x ] ; then
  if [ x${with_gnu_as} != xno ] && echo " ${configdirs} " | grep " ${gasdir} " > /dev/null 2>&1 && [ -d ${srcdir}/${gasdir} ] ; then
    with_gnu_as=yes
    withoptions="$withoptions --with-gnu-as"
  fi
fi

if [ x${use_gnu_ld} = x ] ; then
  if [ x${with_gnu_ld} != xno ] && echo " ${configdirs} " | grep " ld " > /dev/null 2>&1 && [ -d ${srcdir}/ld ] ; then
    with_gnu_ld=yes
    withoptions="$withoptions --with-gnu-ld"
  fi
fi

if [ x${enable_shared} = xyes ]; then
  case "${target}" in
    hppa*)		target_makefile_frag=config/mt-papic ;;
    i[345]86-*)		target_makefile_frag=config/mt-x86pic ;;
    *)			target_makefile_frag=config/mt-${target_cpu}pic ;;
  esac
fi

# post-target:

# Record target_configdirs and the configure arguments in Makefile.
target_configdirs=`echo "${target_configdirs}" | sed -e 's/target-//g'`
targargs=`echo "${arguments}" | \
	sed -e 's/--*norecursion//' \
	    -e 's/--*cache[a-z-]*=[^ 	]*//' \
	    -e 's/--*cache[a-z-]*[ 	][ 	]*[^ 	]*//'`
sed -e "s:^TARGET_CONFIGDIRS[ 	]*=.*$:TARGET_CONFIGDIRS = ${target_configdirs}:" \
    -e "s%^CONFIG_ARGUMENTS[ 	]*=.*$%CONFIG_ARGUMENTS = ${targargs}%" \
    -e "s%^TARGET_SUBDIR[ 	]*=.*$%TARGET_SUBDIR = ${target_subdir}%" \
       Makefile > Makefile.tem
rm -f Makefile
mv -f Makefile.tem Makefile

#
# Local Variables:
# fill-column: 131
# End:
#
