# @(#)Makefile 96/02/29 1.33
# DSP Instruments

# If you *want* to see the five (or more) lines of output for each
# %.ins file converted to a %.dsp, set VERBOSE_DSPP_ASM to some
# nonblank value in your environment.
#
ifndef	VERBOSE_DSPP_ASM
QUIET_DSPP_ASM =	>/dev/null 2>&1
endif

RETIRED_FILES = 	basic_machine.h dsppasm.dic pforth_dspp_asm.dic
UNREGISTERED_FILES =	${RETIRED_FILES}

TARGET_DIRECTORY =	${REMOTE_DIR}/System.m2/Audio/dsp
#PATCH_DIRECTORY =	${REMOTE_DIR}/Examples/Audio/Patches
#EXTRA_AUTOMAGIC_DIRS =	${PATCH_DIRECTORY}

FSRCS =			${wildcard *.ins}
BEEP_SRCS =		${wildcard *.bms}
#PATCH_SRCS =		${wildcard *.psrc}

TARGETS =		${FSRCS:%.ins=${TARGET_DIRECTORY}/%.dsp} \
                        ${BEEP_SRCS:%.bms=${TARGET_DIRECTORY}/%.bm}
#			${PATCH_SRCS:%.psrc=${PATCH_DIRECTORY}/%.patch}

# Deliver include files generated by beep machine assembly.
# DELIVER_FILES_TO =	${PLATFORM_DIR}/includes/audio
# DELIVER_THESE_FILES =	${BEEP_SRCS:%.bms=%.h}

FTP_TRANSFER =		${TARGETS}

include ${CODEMGR_WS}/ws_root/variables/generic
include ${CODEMGR_WS}/ws_root/rules/generic

all.post: ${TARGETS}


# --------------------- forth environment

# forth interpreter and support files
ifeq (${wildcard ${SRC}/tools/pforth_all}, ${SRC}/tools/pforth_all)
PFORTHBIN =		${HOSTOSBIN}
else
PFORTHBIN =		${REFERENCE_HOSTOSBIN}
endif
PFORTH =		${PFORTHBIN}/pforth
PFORTH_DIC =		${PFORTHBIN}/pforth.dic


# --------------------- DSPP assembler dictionary

DSPPASM_DIC=		${OBJDIR}/pforth_dspp_asm.dic
DSPPASM_DIC_SRCS=	log_to_file.fth dspp_asm.fth dspp_ins.fth function_ids.j

# pipe build commands into pforth
${DSPPASM_DIC}: ${DSPPASM_DIC_SRCS} ${PFORTH} ${PFORTH_DIC} Makefile
	@(echo '." Please wait a few seconds for DSP assembler to compile." cr'; \
	  ${DSPPASM_DIC_SRCS:%=echo "include %";}       \
	  echo 'c" ${DSPPASM_DIC}" save-forth';         \
	  echo 'bye')                                 | \
	 ${PFORTH} ${PFORTH_DIC}


# --------------------- DSPP instrument assembly rules

# assembler output files (always generated)
OUTPUT_DSP=	output.dsp
OUTPUT_DEPEND=	output.depend
OUTPUT_BEEP=	output.bm
#OUTPUT_PATCH=	output.patch

# .dsp assembler rule
${TARGET_DIRECTORY}/%.dsp: %.ins ${DSPPASM_DIC} Makefile
	@echo "---------------------------"		${QUIET_DSPP_ASM}
	@${RM} $@ ${OUTPUT_DSP} ${OUTPUT_DEPEND}
	${PFORTH} ${DSPPASM_DIC} $*.ins			${QUIET_DSPP_ASM}
	@${RM} ${OUTPUT_DEPEND}
	${MV} ${OUTPUT_DSP} $@

# .bm assembler rule
${TARGET_DIRECTORY}/%.bm: %.bms ${DSPPASM_DIC} beep_maker.fth Makefile
	@echo "---------------------------"		${QUIET_DSPP_ASM}
	@${RM} $@ ${OUTPUT_DEPEND}
	${PFORTH} ${DSPPASM_DIC} $*.bms			${QUIET_DSPP_ASM}
	@${RM} ${OUTPUT_DEPEND}
	${MV} $*.bm $@
	cat machine_preamble.h machine.h >$*_machine.h
	${RM} machine.h

# .patch assembler rule
#${PATCH_DIRECTORY}/%.patch: %.psrc ${DSPPASM_DIC} Makefile
#	@echo "---------------------------"		${QUIET_DSPP_ASM}
#	@${RM} $@ ${OUTPUT_PATCH} ${OUTPUT_DEPEND}
#	${PFORTH} ${DSPPASM_DIC} $*.psrc                ${QUIET_DSPP_ASM}
#	@${RM} ${OUTPUT_DEPEND}
#	${MV} ${OUTPUT_PATCH} $@


# --------------------- automagic dependencies

# !!! this unfortunately can't find nested dependencies. the assembler, or
#     pforth itself, really should have a way of dumping include file dependencies.
depends: depends.forth
depends.forth:
	-@${RM} ${OBJDIR}/.Fdepends
	-@echo '# Constructed by target "depends" in file "dsp/Makefile"' > ${OBJDIR}/.Fdepends
	-@for  fr in ${FSRCS:%.ins=%} ; do				  \
	  awk '/^include\?/ { print "$${T}'$$fr'.dsp:", $$3 }' $$fr'.ins' ; \
	  awk '/^include /  { print "$${T}'$$fr'.dsp:", $$2 }' $$fr'.ins' ; \
	  done							>> ${OBJDIR}/.Fdepends

ifndef IGNORE_AUTODEPENDS
dotFdepends =		${wildcard ${OBJDIR}/.Fdepends}
ifneq (0, ${words ${dotFdepends}})
T=    ${TARGET_DIRECTORY:%=%/}
include ${dotFdepends}
endif
endif


# --------------------- clean up after ourselves

clean: clean.dsp

clean.dsp:
	${RM} ${dotFdepends} ${DSPPASM_DIC} ${OUTPUT_DSP} ${OUTPUT_DEPEND} ${TARGETS} ${RETIRED_FILES}

