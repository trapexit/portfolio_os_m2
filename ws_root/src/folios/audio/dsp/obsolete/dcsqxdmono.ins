\ @(#) dcsqxdmono.ins 95/11/16 1.10
\ $Id: dcsqxdmono.ins,v 1.9 1995/01/20 20:20:23 peabody Exp $
\ DCSQXDMONO.INS
\ DeCompress SQuare eXact/Delta MONOphonic sample
\
\ 930420 PLB Fix reference to InFIFO, was FIFOIn0 !!
\
\ By: Phil Burk, with Steve Hayes
\ Copyright 3DO 1992

\\\	NOAUTODOC -private -class DSP -name dcsqxdmono.dsp
\\\	OBSOLETE - Play a SQuare/eXact/Delta monophonic compressed 44,100 Hz sample.
\\\
\\\	  Function
\\\
\\\	    This instrument plays a square/xact/delta/monocompressed sample at a fixed
\\\	    rate. This is a 2:1 compression. The compression is done by SquashSnd or
\\\	    SoundHack.
\\\
\\\	  Knobs -enumerated
\\\
\\\	    Amplitude
\\\	        0..0x7FFF. Defaults to 0x7FFF.
\\\
\\\	  Outputs -enumerated
\\\
\\\	    Output
\\\
\\\	  Input FIFOs -enumerated
\\\
\\\	    InFIFO
\\\
\\\	  Resources
\\\
\\\	    Ticks: 42
\\\
\\\	    Code: 42 words
\\\
\\\	  Implementation
\\\
\\\	    V20
\\\
\\\	  See Also
\\\
\\\	    dcsqxdvarmono.dsp, dcsqxdstereo.dsp
\\\

include? DFID_DCSQXDMONO function_ids.j

anew task-dcsqxdmono.ins

_RED
dspp{
ins{

dspp-echo off
DFID_DCSQXDMONO dspp-function-id !
$" dcsqxdmono.dsp" ins-name !

ALLOC.INFIFO  InFIFO
ALLOC.IMEM dc_accum  \ accumulate sample
ALLOC.IMEM dc_toggle \ are we on odd or even byte
ALLOC.IMEM dc_hold   \ hold sample from FIFO
ALLOC.IMEM dc_byte   \ byte shifted hi
ALLOC.IMEM dc_square  \ x*ABS(x)
ALLOC.OUTPUT Output
0 $ 7FFF $ 7FFF ALLOC.KNOB Amplitude
42 ALLOC.TICKS

	InFIFO FIFOSTATUS+ _A #$ 0000 _+	\ address of FIFO status
	_BEQ: NODATA						\ branch to be offset

\ -------------------------------------------
	dc_toggle _%A #$ 8000 _+   \ alternate between neg and pos
	_BMI: GetNewSamp
\ Process held sample
	dc_byte _A _= dc_hold _A 8 _<<' _TRL  \ shift into high position
	_JUMP: Decode

_LABEL: GetNewSamp
	dc_hold _A _= InFIFO _A _TRL    \ get 16 bits from FIFO \ 930420
	dc_byte _A _= ACCUME #$ FF00 _AND    \ mask off high byte

_LABEL: Decode
	ACCUME _TRA  \ take absolute value
	_BGE: PosByte
	_NOP         \ needed cuz next instruction is one word
	ACCUME _NEG  \ negate if negative

_LABEL: PosByte
	dc_square _A _= ACCUME dc_byte _A _*  \ square data value
	dc_byte _A #$ 0100 _AND               \ odd or even ?
	_BEQ: ExactMode

\ Delta mode, use previous_sample + x*|x| as the next sample
	dc_square _A   dc_accum _%A   _CLIP _+
	_JUMP: AllDone

\ Exact mode, use x*|x| as the next sample
_LABEL: ExactMode
	dc_accum _A _= dc_square _A _TRL

_LABEL: AllDone
	_NOP
\ ------------------------------------------

	Output _A _= ACCUME Amplitude _A _*	\  to Mixer

_LABEL: NODATA
}ins
}dspp
