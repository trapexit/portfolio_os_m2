\ @(#) dcsqxdhalfstereo.ins 95/11/16 1.10
\ $Id: dcsqxdhalfstereo.ins,v 1.9 1995/01/20 21:27:52 peabody Exp $
\ DCSQXDSTEREO.INS
\ DeCompress SQuare eXact/Delta Stereophonic sample
\
\ By: Phil Burk, with Steve Hayes
\ Converted to Stereo by Darren Gibbs
\
\ 930420 PLB  Changed reference to FIFOIn0 to InFIFO
\ MOD: 4/13/93			Finish adapting for stereo decompression
\ MOD: 3/16/93			Adapt for stereo decompression
\ 930713 PLB Fixed bad @Done label that caused pitch to be an octave high.
\
\ Copyright 3DO 1992-93

\\\	NOAUTODOC -private -class DSP -name dcsqxdhalfstereo.dsp
\\\	OBSOLETE - Play a SQuare/eXact/Delta stereo compressed 22,050 Hz sample.
\\\
\\\	  Function
\\\
\\\	    This instrument plays a SQuare/eXact/Delta stereo compressed 22,050 Hz
\\\	    sample at a fixed rate. This is a 2:1 compression. The compression is done
\\\	    by SquashSnd or SoundHack. This instrument plays a sample that was recorded
\\\	    at 22,050 hertz, playing it back at 44,100 hertz with interpolated values
\\\	    between samples to keep the sampled sound's original pitch and duration.
\\\
\\\	  Knobs -enumerated
\\\
\\\	    Amplitude
\\\	        0..0x7FFF. Defaults to 0x7FFF.
\\\
\\\	  Outputs -enumerated
\\\
\\\	    LeftOutput
\\\
\\\	    RightOutput
\\\
\\\	  Input FIFOs -enumerated
\\\
\\\	    InFIFO
\\\
\\\	  Resources
\\\
\\\	    Ticks: 107
\\\
\\\	    Code: 92 words
\\\
\\\	  Implementation
\\\
\\\	    V24
\\\
\\\	  See Also
\\\
\\\	    dcsqxdstereo.dsp, dcsqxdmono.dsp, dcsqxdvarmono.dsp
\\\

include? DFID_DCSQXDHALFSTEREO function_ids.j

anew task-dcsqxdhalfstereo.ins

_RED
dspp{
ins{

DFID_DCSQXDHALFSTEREO dspp-function-id !
$" dcsqxdhalfstereo.dsp" ins-name !

ALLOC.INFIFO  InFIFO
ALLOC.IMEM    Toggle     \ are we on or between samples
ALLOC.IMEM    PrevLeft   \ previous for interpolation, expanded to 16 bits
ALLOC.IMEM    PrevRight  \ previous for interpolation, expanded to 16 bits
ALLOC.IMEM    TempLeft   \ previous for interpolation, expanded to 16 bits
ALLOC.IMEM    TempRight  \ previous for interpolation, expanded to 16 bits
ALLOC.IMEM dc_hold   		\ hold sample from FIFO
ALLOC.IMEM dc_leftbyte   	\ left compressed sample
ALLOC.IMEM dc_rightbyte   	\ right compressed sample
ALLOC.IMEM dc_square  		\ x*ABS(x)
ALLOC.IMEM dc_leftaccum  	\ accumulate left 16 bit sample
ALLOC.IMEM dc_rightaccum  	\ accumulate right 16 bit sample
ALLOC.OUTPUT LeftOutput
ALLOC.OUTPUT RightOutput
0 $ 7FFF $ 7FFF ALLOC.KNOB Amplitude

107 ALLOC.TICKS

\ -------------------------------------------
	Toggle _%A #$ 8000 _+   \ alternate between neg and pos
	_BMI: GetNewSamp
	LeftOutput _A _= PrevLeft _A Amplitude _A _*
	RightOutput _A _= PrevRight _A Amplitude _A _*
	_JUMP: Done

\ ----------------------------------------
_LABEL: GetNewSamp

	InFIFO FIFOSTATUS+ _A #$ 0000 _+	\ address of FIFO status
	_BEQ: Done						\ branch to be offset

	dc_hold _A  _= InFIFO _A _TRL    			\ get 16 bits from FIFO
	dc_leftbyte _A _= ACCUME #$ FF00 _AND   	\ mask off low byte
	dc_rightbyte _A _= 	dc_hold _A  8 _<<' _TRL

\ decode left sample   first, take absolute value
	dc_leftbyte _A _TRA  	\ test value
	_BGE: LeftPosByte
	_NOP         			\ needed cuz next instruction is one word
	ACCUME _NEG  			\ negate if negative

_LABEL: LeftPosByte
	dc_square _A _= ACCUME dc_leftbyte _A _*  	\ square data value
	dc_leftbyte _A #$ 0100 _AND               	\ odd or even ?
	_BEQ: LeftExactMode
\ add to previous value
	dc_square _A   dc_leftaccum _%A   _+
	_JUMP: LeftDone

_LABEL: LeftExactMode
	dc_leftaccum _A _= dc_square _A _TRL

_LABEL: LeftDone
	_NOP
	TempLeft _A _= ACCUME #$ 0000 _+
\ Interpolate with previous
	ACCUME 1 _>>>' _TRA                     \ arithmetic shift right
	PrevLeft _A #$ 4000 ACCUME _*+          \ p/2 + h/2
	LeftOutput _A _= ACCUME Amplitude _A _*	\ to Mixer
	PrevLeft _A TempLeft _A _MOVE           \ save for next state

\ decode right sample ------------------------------------------

	dc_rightbyte _A _TRA  \ take absolute value
	_BGE: RightPosByte
	_NOP         \ needed cuz next instruction is one word
	ACCUME _NEG  \ negate if negative

_LABEL: RightPosByte
	dc_square _A _= ACCUME dc_rightbyte _A _*  	\ square data value
	dc_rightbyte _A #$ 0100 _AND               	\ odd or even ?
	_BEQ: RightExactMode
\ add to previous value
	dc_square _A   dc_rightaccum _%A   _+
	_JUMP: RightDone

_LABEL: RightExactMode
	dc_rightaccum _A _= dc_square _A _TRL

_LABEL: RightDone
	_NOP
	TempRight _A _= ACCUME #$ 0000 _+
\ Interpolate with previous
	ACCUME 1 _>>>' _TRA             \ arithmetic shift right
	PrevRight _A #$ 4000 ACCUME _*+      \ p/2 + h/2
	RightOutput _A _= ACCUME Amplitude _A _*	\  to Mixer
	PrevRight _A TempRight _A _MOVE

_LABEL: Done
}ins
}dspp
