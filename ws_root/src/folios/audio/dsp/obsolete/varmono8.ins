\ @(#) varmono8.ins 95/11/16 1.8
\ $Id: varmono8.ins,v 1.7 1995/01/20 20:20:23 peabody Exp $
\ 8 bit variable rate monophonic sample player
\
\ By: Phil Burk
\ Copyright 3DO 1992
\
\ 931206 PLB Reorganised to reduce code size, same ticks!

\\\	NOAUTODOC -private -class DSP -name varmono8.dsp
\\\	OBSOLETE - Rate-variable 8-bit sample player.
\\\
\\\	  Function
\\\
\\\	    This instrument is a rate-variable 8-bit sample player.
\\\
\\\	    This instrument is limited to a pitch one octave above base pitch, if
\\\	    recorded at 44.1 kHz. If it is recorded at 22 kHz, the pitch can go two
\\\	    octaves up. A rate of 0x8000 corresponds to one data sample per DAC
\\\	    sample frame. 0xFFFF is the highest possible rate.
\\\
\\\	  Knobs
\\\
\\\	    Frequency  -  units are fixed point phase increment. $8000 equals the
\\\	    normal sample rate, with 1 sample per frame. Thus, you can go from zero
\\\	    to one octave above the original.
\\\
\\\	    Amplitude - 0.0 to 1.0
\\\
\\\	  Inputs
\\\
\\\	    None
\\\
\\\	  Outputs
\\\
\\\	    Output
\\\
\\\	  Input FIFOs
\\\
\\\	    InFIFO
\\\
\\\	  Output FIFOs
\\\
\\\	    None
\\\
\\\	  Resources
\\\
\\\	    Ticks = 38
\\\
\\\	    N memory = 50 words
\\\

include? DFID_VARMONO8 function_ids.j

anew task-varmono8.ins

dspp-echo off
_RED
dspp{
ins{

DFID_VARMONO8 dspp-function-id !
$" varmono8.dsp" ins-name !

ALLOC.INFIFO  InFIFO
ALLOC.IMEM    Toggle       \ are we on odd or even byte
ALLOC.IMEM    SampleHold   \ hold sample from FIFO
ALLOC.IMEM    Phase
ALLOC.IMEM    OldVal
ALLOC.IMEM    NewVal
ALLOC.OUTPUT  Output
$ 8000 KNOB_TYPE_SAMPLE_RATE ALLOC.KNOB.M2 Frequency
$ 7FFF KNOB_TYPE_RAW_UNSIGNED ALLOC.KNOB.M2 Amplitude
38 ALLOC.TICKS

\ This version uses fixed point frequency that is shifted right by 1
\ allowing a range of 0->1.999.
\ Phase contains the fractional phase as a 15 bit value so it is already
\ in the form needed for interpolation and can be used directly.
\ It clumps the FIFO accesses to avoid DMA collisions.

\	InFIFO FIFOSTATUS+ _A #$ 0000 _+	\ check for data in FIFO
\	_BEQ: @NODATA

\ Calculate phase increment
	Phase _%A Frequency _A _+
\ Determine whether to get 0,1,or 2 samples
	_BMI:	@Once
	_BCC:	@Interpolate

\ ------------------------ Use up two samples ----------
_LABEL: @Twice
\ Get two samples
	Toggle _A _TRA   \ don't toggle cuz we get TWO
	_BMI: @GetBothFromFIFO

\ Process held sample
	OldVal _A _= SampleHold _A 8 _<<' _TRL  \ shift into high position
	_JUMP: @GetMSBFromFIFO

_LABEL: @GetBothFromFIFO
	SampleHold _A  _= InFIFO _A _TRL    \ get 16 bits from FIFO
	OldVal _A _= ACCUME #$ FF00 _AND    \ mask off high byte
	_JUMP: @GetFromLSB

\ ------------------------ Just get one new sample ----------
_LABEL: @Once
	Phase _%A #$ 8000	_-          \ wrap back to positive phase !
	OldVal _A NewVal _A	_MOVE		\ OldVal<-newval
	Toggle _%A #$ 8000 _+           \ alternate between neg and pos
	_BMI: @GetFromLSB

_LABEL: @GetMSBFromFIFO
	SampleHold _A  _= InFIFO _A _TRL    \ get 16 bits from FIFO
	NewVal _A _= ACCUME #$ FF00 _AND    \ mask off high byte
	_JUMP: @Interpolate

_LABEL: @GetFromLSB
	NewVal _A _= SampleHold _A 8 _<<' _TRL  \ shift into high position

\ ----------------------------------------------------------
_LABEL: @Interpolate
	Phase _A OldVal _A OldVal _A _*-      \ old*(frac-1)	= old*frac-old
	NewVal _A Phase _A ACCUME _*-

_LABEL: @Done
    Output _A _= ACCUME Amplitude _A _* \ scale loudness

\ _LABEL: @NODATA
	_ENDEXT
}ins
}dspp
