\ @(#) dcsqxdstereo.ins 95/05/23 1.8
\ $Id: dcsqxdstereo.ins,v 1.8 1995/01/20 20:20:23 peabody Exp $
\ DCSQXDSTEREO.INS
\ DeCompress SQuare eXact/Delta Stereophonic sample
\
\ By: Phil Burk, with Steve Hayes
\ Converted to Stereo by Darren Gibbs
\
\ 930420 PLB  Changed reference to FIFOIn0 to InFIFO
\ MOD: 4/13/93			Finish adapting for stereo decompression
\ MOD: 3/16/93			Adapt for stereo decompression
\
\ Copyright 3DO 1992-93

\\\	NOAUTODOC -private -class DSP -name dcsqxdstereo.dsp
\\\	OBSOLETE - Play a SQuare/eXact/Delta monophonic compressed 44,100 Hz sample.
\\\
\\\	  Function
\\\
\\\	    This instrument plays a square/xact/delta/stereocompressed sample at a
\\\	    fixed rate. This is a 2:1 compression. The compression is done by
\\\	    SquashSnd or SoundHack.
\\\
\\\	  Knobs -enumerated
\\\
\\\	    Amplitude
\\\	        0..0x7FFF. Defaults to 0x7FFF.
\\\
\\\	  Outputs -enumerated
\\\
\\\	    LeftOutput
\\\
\\\	    RightOutput
\\\
\\\	  Input FIFOs -enumerated
\\\
\\\	    InFIFO
\\\
\\\	  Resources
\\\
\\\	    Ticks: 61
\\\
\\\	    Code: 66 words
\\\
\\\	  Implementation
\\\
\\\	    V20
\\\
\\\	  See Also
\\\
\\\	    dcsqxdhalfstereo.dsp, dcsqxdmono.dsp, dcsqxdvarmono.dsp
\\\

include? DFID_DCSQXDSTEREO function_ids.j

anew task-dcsqxdstereo.ins

_RED
dspp{
ins{
DFID_DCSQXDSTEREO dspp-function-id !
$" dcsqxdstereo.dsp" ins-name !

ALLOC.INFIFO  InFIFO
ALLOC.IMEM dc_hold   		\ hold sample from FIFO
ALLOC.IMEM dc_leftbyte   	\ left compressed sample
ALLOC.IMEM dc_rightbyte   	\ right compressed sample
ALLOC.IMEM dc_square  		\ x*ABS(x)
ALLOC.IMEM dc_leftaccum  	\ accumulate left 16 bit sample
ALLOC.IMEM dc_rightaccum  	\ accumulate right 16 bit sample
ALLOC.OUTPUT LeftOutput
ALLOC.OUTPUT RightOutput
0 $ 7FFF $ 7FFF ALLOC.KNOB Amplitude
66 ALLOC.TICKS

	InFIFO FIFOSTATUS+ _A #$ 0000 _+	\ address of FIFO status
	_BEQ: NODATA						\ branch to be offset

	dc_hold _A  _= InFIFO _A _TRL    			\ get 16 bits from FIFO
	dc_leftbyte _A _= ACCUME #$ FF00 _AND   	\ mask off low byte
	dc_rightbyte _A _= 	dc_hold _A  8 _<<' _TRL

\ decode left sample   first, take absolute value
	dc_leftbyte _A _TRA  	\ test value
	_BGE: LeftPosByte
	_NOP         			\ needed cuz next instruction is one word
	ACCUME _NEG  			\ negate if negative

_LABEL: LeftPosByte
	dc_square _A _= ACCUME dc_leftbyte _A _*  	\ square data value
	dc_leftbyte _A #$ 0100 _AND               	\ odd or even ?
	_BEQ: LeftExactMode
\ add to previous value
	dc_square _A   dc_leftaccum _%A   _+
	_JUMP: LeftDone

_LABEL: LeftExactMode
	dc_leftaccum _A _= dc_square _A _TRL

_LABEL: LeftDone
	_NOP
	LeftOutput _A _= ACCUME Amplitude _A _*		\ to Mixer

\ decode right sample

	dc_rightbyte _A _TRA  \ take absolute value
	_BGE: RightPosByte
	_NOP         \ needed cuz next instruction is one word
	ACCUME _NEG  \ negate if negative

_LABEL: RightPosByte
	dc_square _A _= ACCUME dc_rightbyte _A _*  	\ square data value
	dc_rightbyte _A #$ 0100 _AND               	\ odd or even ?
	_BEQ: RightExactMode
\ add to previous value
	dc_square _A   dc_rightaccum _%A   _+
	_JUMP: RightDone

_LABEL: RightExactMode
	dc_rightaccum _A _= dc_square _A _TRL

_LABEL: RightDone
	_NOP
	RightOutput _A _= ACCUME Amplitude _A _*	\  to Mixer

_LABEL: NODATA
}ins
}dspp
