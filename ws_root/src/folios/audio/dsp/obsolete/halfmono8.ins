\ @(#) halfmono8.ins 95/11/16 1.8
\ $Id: halfmono8.ins,v 1.7 1994/08/18 20:01:44 peabody Exp $
\ half sample rate, 8 bit monophonic sample player
\
\ 4 States
\    0  => get new 16 bit word,  interpolated prev -> highbyte
\    1  => play high byte
\    2  => interpolate prev -> lowbyte
\    3  => play low  byte
\
\ 930420 PLB Fix reference to InFIFO, was FIFOIn0 !!
\ 930430 PLB Fixed unresolved label
\ 930527 PLB Fixed state mask
\
\ By: Phil Burk
\ Copyright 3DO 1992

\\\	NOAUTODOC -private -class DSP -name halfmono8.dsp
\\\	OBSOLETE - Play a monophonic 8-bit sample at 22,050 hertz.
\\\
\\\	  Function
\\\
\\\	    This instrument plays a monophonic 8-bit sample recorded at 22,050 hertz.
\\\
\\\	  Knobs -enumerated
\\\
\\\	    Amplitude
\\\	        0..0x7FFF. Defaults to 0x7FFF.
\\\
\\\	  Outputs -enumerated
\\\
\\\	    Output
\\\
\\\	  Input FIFOs -enumerated
\\\
\\\	    InFIFO
\\\
\\\	  Resources
\\\
\\\	    Ticks: 38
\\\
\\\	    Code: 49 words
\\\
\\\	  Implementation
\\\
\\\	    V20
\\\
\\\	  See Also
\\\
\\\	    fixedmono8.dsp, varmono8.dsp, halfstereo16.dsp
\\\

include? DFID_HALFMONO8 function_ids.j

anew task-halfmono8.ins
dspp-echo off
_RED
dspp{
ins{

DFID_HALFMONO8 dspp-function-id !
$" halfmono8.dsp" ins-name !

ALLOC.INFIFO  InFIFO
ALLOC.IMEM    CurState     \ are we on or between samples, left or right
ALLOC.IMEM    PrevValue    \ previous for interpolation, expanded to 16 bits
ALLOC.IMEM    SampleHold   \ hold sample from FIFO
ALLOC.OUTPUT Output
0 $ 7FFF $ 7FFF ALLOC.KNOB Amplitude
38 ALLOC.TICKS

	InFIFO FIFOSTATUS+ _A #$ 0000 _+	\ address of FIFO status
	_BEQ: @NODATA

\ ---------------------------------------------------------
	CurState _%A #$ 0001 _+    \ increment state
	ACCUME #$ 0002 _AND        \ was #$4, 930527
	_BNE: @States23

	CurState _A #$ 0001 _AND
	_BNE: @State1
\ 0  => get new 16 bit word,  interpolated prev -> high
	SampleHold _A  _= InFIFO _A _TRL    \ get 16 bits from FIFO \ 930420
	ACCUME #$ FF00 _AND               \ mask off high byte
	ACCUME 1 _>>>' _TRA         \ arithmetic shift right
	PrevValue _A #$ 4000 ACCUME _*+      \ p/2 + h/2
	_JUMP: @Done

_LABEL: @State1
\ 1  => play high byte
	PrevValue _A _= SampleHold _A #$ FF00 _AND    \ mask off high byte
	_JUMP: @Done

_LABEL: @States23
	CurState _A #$ 0001 _AND
	_BNE: @State3

\ 2  => interpolate prev -> low
	SampleHold _A 8 _<<' _TRL  \ shift into high position, State 2
	ACCUME 1 _>>>' _TRA
	PrevValue _A #$ 4000 ACCUME _*+      \ p/2 + lo/2
	_JUMP: @Done

_LABEL: @State3
\ 3  => play low
	PrevValue _A _= SampleHold _A 8 _<<' _TRL  \ shift into high position

_LABEL: @Done
	Output _A _= ACCUME Amplitude _A _*	\  scale output

	_NOP
_LABEL: @NODATA
}ins
}dspp
