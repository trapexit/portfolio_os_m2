\ @(#) sawfilterednoise.ins 95/11/16 1.8
\ $Id: sawfilterednoise.ins,v 1.8 1995/01/20 20:20:23 peabody Exp $
\ Noise through Modulated State Variable Filter
\ Phil Burk
\ Copyright 1992 NTG

\\\	NOAUTODOC -private -class DSP -name sawfilterednoise.dsp
\\\	OBSOLETE - Filtered noise with sawtooth modulation.
\\\
\\\	  Function
\\\
\\\	    This instrument passes white noise through the state variable filter. The
\\\	    filter cutoff frequency is modulated with a sawtooth instrument. This is
\\\	    useful for helicopters or other "whop, whop" sounds
\\\
\\\	  Knobs
\\\
\\\	    Amplitude - 0  =>  $7FFF, final amplitude of voice
\\\
\\\	    Frequency - 0 => $2000, default $100. Non-linear cutoff
\\\	    frequency of filter.
\\\
\\\	    Resonance  - 1 / Q, 0 => $6000, default $1000 = filter will ring
\\\	    at low values.
\\\
\\\	    LFORate  - 0  =>  $0100, default $0020, rate of sawtooth
\\\	    modulating filter
\\\
\\\	    LFODepth  - 0  =>  $2000, default $0100, Amplitude of sawtooth
\\\	    modulating filter. Actual cutoff is = Frequency +
\\\	    SawtoothOutput*LFODepth.
\\\
\\\	  Inputs
\\\
\\\	    None
\\\
\\\	  Outputs
\\\
\\\	    Output
\\\
\\\	  Input FIFOs
\\\
\\\	    None
\\\
\\\	  Output FIFOs
\\\
\\\	    None
\\\
\\\	  Resource
\\\
\\\	    Ticks = 31
\\\
\\\	    N memory = 29 words
\\\

include? DFID_SAWFILTEREDNOISE function_ids.j

anew task-sawfilterednoise.ins

$ 0EA constant HardNoise
_RED
dspp{
ins{

DFID_SAWFILTEREDNOISE dspp-function-id !
$" sawfilterednoise.dsp" ins-name !

\ ************************************************************************************

ALLOC.IMEM  LowPass
ALLOC.IMEM  BandPass
ALLOC.IMEM  HighPass
ALLOC.IMEM  CalcFreq
ALLOC.IMEM  SawPhase
ALLOC.OUTPUT Output
0 $ 4000 $ 2000 ALLOC.KNOB Frequency
0 $ 6000 $ 1000 ALLOC.KNOB Resonance
0 $ 0100 $ 0020 ALLOC.KNOB LFORate
0 $ 2000 $ 0100 ALLOC.KNOB LFODepth
0 $ 7FFF $ 7FFF ALLOC.KNOB Amplitude
31 ALLOC.TICKS

	SawPhase _%A LFORate _A _+
	CalcFreq _A _= ACCUME LFODepth _A  Frequency _A _*+
	_NOP
	CalcFreq _A BandPass _A LowPass _%A _CLIP _*+  \ LowPass=SVFFreq*BandPass+LowPass
	Resonance _A BandPass _A ACCUME _CLIP _*+		\ SVFQ*BandPass+A
	_NOP
	HighPass _A _= HardNoise _A ACCUME _CLIP _-		\ HighPass=Noise-A
	CalcFreq _A ACCUME BandPass _%A _CLIP _*+	    \ BandPass=SVFFreq*A+BandPass
	Output _A _= LowPass _A Amplitude _A _*
	_NOP
}ins
}dspp
