\ @(#) sampler_adp4_v2.ins 96/08/07 1.1
\ $Id: sampler_adpcm_v2.ins,v 1.5 1995/01/20 20:20:23 peabody Exp $
\ ADPCM with variable rate
\
\ Phil Burk
\ Copyright 3DO 1993
\ All Rights Reserved
\ Proprietary and Confidential
\

\\\	AUTODOC -class DSP -group Sampled_Sound -name sampler_adp4_v2.dsp
\\\	Variable-rate stereo sample player with ADPCM 4:1 decompression.
\\\
\\\	  Description
\\\
\\\	    This instrument plays a sample, at variable rate, that has been previously
\\\	    compressed to a 4-bit ADP4 format. Use SquashSnd to compress
\\\	    the sample.
\\\
\\\	  Knobs
\\\
\\\	    SampleRate - AUDIO_SIGNAL_TYPE_SAMPLE_RATE
\\\	        SampleRate in Hertz. Range is 0.0 to 44100.0. Default is 44100.0.
\\\
\\\	    Amplitude - AUDIO_SIGNAL_TYPE_GENERIC_SIGNED
\\\	        -1.0 to 1.0, defaults to 1.0.
\\\
\\\	  Outputs
\\\
\\\	    Output - 2 parts
\\\	        Stereo output.
\\\
\\\	  Input FIFOs
\\\
\\\	    InFIFO
\\\
\\\	  Resources
\\\
\\\	    Ticks: 145
\\\
\\\	    Code: 49 words per instrument + 53 words shared overhead
\\\
\\\	    Data: 15 words per instrument + 98 words shared overhead
\\\
\\\	    FIFOs: 1
\\\
\\\	  Implementation
\\\
\\\	    V??
\\\
\\\	  Caveats
\\\
\\\	    Unlike most other sample player instruments this one doesn't support playing
\\\	    the sample above the system sample rate.
\\\
\\\	  See Also
\\\
\\\	    sampler_16_v2.dsp(@), sampler_cbd2_v2.dsp(@), sampler_sqs2_v1.dsp(@)

include? DFID_SAMPLER_ADP4_V2 function_ids.j
include? ADPCM_REG_StepSize sub_decode_adp4.j

anew task-sampler_adp4_v2.ins
echo off
dspp-echo off
dspp-debug off
_BULLDOG

dspp{
ins{

DFID_SAMPLER_ADP4_V2 dspp-function-id !
$" sampler_adp4_v2.dsp" ins-name !

\ ADPCM stream parsing variables

_IMPORT ALLOC.VARIABLE gScratch3  \ use 3 cuz 1&2 used by decode subroutine

\ allocate a FIFO then bind registers to allocated FIFO
DRSC_INFIFO_SUBTYPE_8BIT ALLOC.INFIFO.SUBTYPE  InFIFO

ADP4_DECODE_BASE_REG ADP4_DECODE_NUM_REGS ALLOC.RBASE#  DataRBase0
ADP4_DECODE_BASE_REG ADP4_DECODE_NUM_REGS ALLOC.RBASE#  DataRBase1

2 ALLOC.OUTPUT.ARRAY  Output
0 DRSC_AT_START ALLOC.VARIABLE.DEFAULT Phase
$ 8000 KNOB_TYPE_SAMPLE_RATE ALLOC.KNOB.M2 SampleRate
$ 7FFF KNOB_TYPE_RAW_SIGNED ALLOC.KNOB.M2 Amplitude

\ Data for Channel 0 -----------
0 DRSC_AT_START ALLOC.VARIABLE.DEFAULT OldVal0    \ previous for interpolation, expanded to 16 bits
0 DRSC_AT_START ALLOC.VARIABLE.DEFAULT NewVal0    \ current for interpolation, expanded to 16 bits
\ Bind named resources to registers so we can initialize them at StartInstrument()
7 DRSC_AT_START ALLOC.VARIABLE.DEFAULT StepSize0
	ADPCM_REG_StepSize ADP4_DECODE_BASE_REG - DataRBase0 StepSize0 BIND.RESOURCE
0 DRSC_AT_START ALLOC.VARIABLE.DEFAULT StepIndex0
	ADPCM_REG_StepIndex ADP4_DECODE_BASE_REG - DataRBase0 StepIndex0 BIND.RESOURCE

\ Data for Channel 1 -----------
0 DRSC_AT_START ALLOC.VARIABLE.DEFAULT OldVal1    \ previous for interpolation, expanded to 16 bits
0 DRSC_AT_START ALLOC.VARIABLE.DEFAULT NewVal1    \ current for interpolation, expanded to 16 bits
\ Bind named resources to registers so we can initialize them at StartInstrument()
7 DRSC_AT_START ALLOC.VARIABLE.DEFAULT StepSize1
	ADPCM_REG_StepSize ADP4_DECODE_BASE_REG - DataRBase1 StepSize1 BIND.RESOURCE
0 DRSC_AT_START ALLOC.VARIABLE.DEFAULT StepIndex1
	ADPCM_REG_StepIndex ADP4_DECODE_BASE_REG - DataRBase1 StepIndex1 BIND.RESOURCE

$" sub_decode_adp4.dsp" ALLOC.DYNAMIC.LINKS

145 ALLOC.TICKS

	InFIFO FIFOSTATUS+ _A _TRA  \ skip if no data in FIFO
	_BEQ: NoData

\ Calculate phase increment
	Phase _%A SampleRate _A _+
\ Determine whether to decompress another samples
	_BPL:	@Interpolate

\ Phase went negative so we need to decode another pair of nibbles.
	Phase _%A $ 8000 _# _- \ wrap back to positive phase

\ Decompress each channel.
	gScratch3 _A  _= InFIFO _A _TRL  \ get 16 bits from FIFO, leave in ACCUME

	DataRBase0 ADP4_DECODE_BASE_REG _RBASE#
	OldVal0 _A NewVal0 _A  _MOVE
	_JSR:  sub_decode_adp4
	NewVal0 _A  ADPCM_REG_NewVal _reg  _MOVE   \ save for interpolation
	
	
	gScratch3 _A 4 _<<' _TRL        \ now decompress other nibble
	
	DataRBase1 ADP4_DECODE_BASE_REG _RBASE#
	OldVal1 _A NewVal1 _A  _MOVE
	_JSR:  sub_decode_adp4
	NewVal1 _A  ADPCM_REG_NewVal _reg  _MOVE   \ save for interpolation
	

\ ------------------------------------------
_LABEL: @Interpolate
	Phase _A OldVal0 _A OldVal0 _A _*-	\ old*(frac-1)	= old*frac-old
	NewVal0 _A Phase _A ACCUME _*-		\ interpolate output value
	Output 0 PART+ _A _= ACCUME Amplitude _A _*	\  scale output
	
	Phase _A OldVal1 _A OldVal1 _A _*-	\ old*(frac-1)	= old*frac-old
	NewVal1 _A Phase _A ACCUME _*-		\ interpolate output value
	Output 1 PART+ _A _= ACCUME Amplitude _A _*	\  scale output

_LABEL: NoData

}ins
}dspp
